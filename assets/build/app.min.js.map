{"version":3,"file":"app.min.js","sources":["../src/squares/helpers/cliff.js","../src/squares/cliff.js","../src/squares/grass.js","../src/squares/helpers/wall.js","../src/squares/water.js","../src/squares/tree.js","../src/squares/path.js","../src/maps/helpers.js","../src/maps/map1.js","../src/maps/map2.js","../src/maps/index.js","../src/squares/path-exit.js","../src/squares/index.js","../src/characters/stories/character1.js","../src/characters/stories/character2.js","../src/characters/stories/index.js","../src/characters/create.js","../src/characters/index.js","../src/conversations/conversation1.js","../src/conversations/conversation2.js","../src/conversations/conversation3.js","../src/conversations/index.js","../src/index.js"],"sourcesContent":["import { \r\n  MeshToonMaterial,\r\n  TextureLoader,\r\n  BoxGeometry\r\n} from 'three'\r\n\r\nconst createCliff = (app, scene, coordinates, config) => {\r\n  \r\n  const cache = app.world.cache.get(\r\n    `cliff-mesh`,\r\n    () => {\r\n\r\n      const cliffMaterial = new MeshToonMaterial({ \r\n        map:  new TextureLoader().load('./assets/ressources/world/cliff/cliff.jpg')\r\n      })\r\n\r\n      const grassMaterial = new MeshToonMaterial({ \r\n        map: new TextureLoader().load('./assets/ressources/world/grass/grass.avif')\r\n      })\r\n      \r\n      const geometry = new BoxGeometry(\r\n        app.map.squareSize,\r\n        app.map.squareSize,\r\n        app.map.squareSize\r\n      )\r\n      \r\n      return {\r\n        geometry,\r\n        material: [\r\n          cliffMaterial,\r\n          cliffMaterial,\r\n          cliffMaterial,\r\n          cliffMaterial,\r\n          grassMaterial,\r\n          cliffMaterial,\r\n        ]\r\n      }\r\n    }\r\n  )\r\n\r\n  for (let height = 0; height < config.height; height++) {\r\n    app.world.instance.add('cliff-mesh', cache.geometry, cache.material, { \r\n      position: { \r\n        x: coordinates.x[1] - app.map.squareSize / 2,\r\n        y: coordinates.y[1] - app.map.squareSize / 2, \r\n        z: (app.map.squareSize / 2) + (app.map.squareSize * height)\r\n      },\r\n      before: mesh => {\r\n        mesh.receiveShadow = true\r\n        mesh.castShadow = true\r\n        mesh.walkable = false\r\n      }\r\n    })\r\n  }\r\n}\r\n\r\nexport { createCliff }\r\n","import { createCliff } from './helpers/cliff'\r\n\r\nconst renderCliff = ({\r\n  scene,\r\n  coordinates,\r\n  app,\r\n  config\r\n}) => {\r\n\r\n  let maxHeight = config.height ?? 1\r\n  if( ! Array.isArray(config) ) config = [{ height : maxHeight }]\r\n\r\n  config.forEach(cliff => {\r\n    createCliff(app, scene, coordinates, cliff)\r\n    maxHeight = maxHeight < cliff.height ? cliff.height : maxHeight\r\n  })\r\n}\r\n\r\nexport { renderCliff }\r\n","import { \r\n  PlaneGeometry, \r\n  MeshToonMaterial,\r\n  TextureLoader\r\n} from 'three'\r\n\r\nconst renderGrass = ({\r\n  scene,\r\n  coordinates,\r\n  app\r\n}) => {\r\n\r\n  const cache = app.world.cache.get(\r\n    `./assets/ressources/world/grass/grass.avif`,\r\n    url => {\r\n\r\n      const texture  = new TextureLoader().load(url)\r\n      const material = new MeshToonMaterial({ map: texture })\r\n      const geometry = new PlaneGeometry(app.map.squareSize, app.map.squareSize)\r\n     \r\n      return { material, geometry }\r\n    }\r\n  )\r\n\r\n  app.world.instance.add('grass', cache.geometry, cache.material, { \r\n    before: mesh => mesh.receiveShadow = true,\r\n    position: { \r\n      x: coordinates.x[1] - app.map.squareSize / 2,\r\n      y: coordinates.y[1] - app.map.squareSize / 2,\r\n      z: 0 \r\n    }\r\n  })\r\n}\r\n\r\nexport { renderGrass }\r\n","import { \r\n  MeshToonMaterial,\r\n  TextureLoader,\r\n  BoxGeometry\r\n} from 'three'\r\n\r\nconst createWall = (app, scene, coordinates, direction, height, type = false) => {\r\n  \r\n  const isUnderwater = type === 'cliff-underwater.png'\r\n  \r\n  const cache = app.world.cache.get(\r\n      `./assets/ressources/world/cliff/${type ? type : 'cliff.jpg'}`,\r\n      url => {\r\n\r\n        const texture  = new TextureLoader().load(url)\r\n        const geometry = new BoxGeometry(\r\n          app.map.squareSize, \r\n          isUnderwater ? 0 : 40, \r\n          app.map.squareSize\r\n        )  \r\n\r\n        const imageMaterial = new MeshToonMaterial({ \r\n          map         : texture, \r\n          transparent : isUnderwater \r\n        })\r\n\r\n        const colorMaterial = new MeshToonMaterial({ \r\n          color       : 0x464237, \r\n          transparent : isUnderwater\r\n        })\r\n\r\n        return {\r\n          geometry, \r\n          material: [\r\n            colorMaterial, \r\n            colorMaterial,\r\n            colorMaterial,\r\n            imageMaterial,\r\n            colorMaterial,\r\n            colorMaterial,\r\n          ]\r\n        }\r\n      }\r\n    )\r\n  \r\n  const rotation = { x: 0, y:0, z: 0 }\r\n  const position = {\r\n    x: coordinates.x[1] - app.map.squareSize / 2,\r\n    y: coordinates.y[1] - app.map.squareSize / 2, \r\n    z: height ?? 0\r\n  }\r\n\r\n  switch(direction) {\r\n    case 'top':\r\n      position.y = (position.y + app.map.squareSize / 2) + (isUnderwater ? 0 : 20)\r\n      break;\r\n    case 'right':\r\n      rotation.z = Math.PI / 2\r\n      position.x = (position.x + app.map.squareSize / 2) + (isUnderwater ? 0 : 20)\r\n      break;\r\n    case 'left':\r\n      rotation.z = Math.PI / 2\r\n      position.x = (position.x - app.map.squareSize / 2) - (isUnderwater ? 0 : 20)\r\n      break;\r\n  }\r\n\r\n  app.world.instance.add(`cliff-mesh-${type}`, cache.geometry, cache.material, { \r\n    position,\r\n    rotation,\r\n    before: mesh => {\r\n      mesh.receiveShadow = true\r\n      mesh.castShadow = true\r\n    }\r\n  })\r\n}\r\n\r\nexport { createWall }\r\n","import { \r\n  PlaneGeometry, \r\n  Mesh,\r\n  ShaderMaterial,\r\n  ShadowMaterial\r\n} from 'three'\r\n\r\nimport WaterFragment from '../shaders/water.fragment.glsl'\r\nimport WaterVertex from '../shaders/water.vertex.glsl'\r\nimport { createWall } from './helpers/wall'\r\n\r\nconst renderWater = ({\r\n  coordinates,\r\n  app,\r\n  scene,\r\n  config = {}\r\n}) => {\r\n\r\n  /**\r\n   * We will use a different key for both the cache and the instanciated key according\r\n   * to the type of square\r\n   */\r\n  const squareKey = `water-${ config.border ?? 'regular' }`\r\n\r\n  const cache = app.world.cache.get(\r\n    squareKey,\r\n    type => {\r\n\r\n      const uniforms = {\r\n        uBorder : { value: getBorderType(type) },\r\n        uTime   : { value: 0 }\r\n      }\r\n\r\n      const material = new ShaderMaterial({\r\n        vertexShader   : WaterVertex,\r\n        fragmentShader : WaterFragment,\r\n        transparent    : true,\r\n        uniforms       : uniforms\r\n      })\r\n      \r\n      setInterval(() => {\r\n        if( material.uniforms ) material.uniforms.uTime.value += 0.1\r\n      }, 25)\r\n\r\n      const geometry = new PlaneGeometry(app.map.squareSize, app.map.squareSize)\r\n      \r\n      return { geometry, material }\r\n    }\r\n  )\r\n\r\n  /**\r\n   * It's tricky to add support for shadows in a cusotm ShaderMaterial, so instead we \r\n   * display a ShadowMaterial at the same position than the shaders to simulate it\r\n   */\r\n  const shadow = app.world.cache.get(\r\n    'water-shadow',\r\n    () => {\r\n\r\n      const geometry = new PlaneGeometry(app.map.squareSize, app.map.squareSize)\r\n      const material = new ShadowMaterial({\r\n        opacity : 0.25, \r\n        color   : 0x06436d\r\n      })\r\n\r\n      return new Mesh(geometry, material)\r\n    }\r\n  ).clone()\r\n\r\n  const position = {\r\n    x: coordinates.x[1] - app.map.squareSize / 2, \r\n    y: coordinates.y[1] - app.map.squareSize / 2,\r\n    z: -20\r\n  }\r\n\r\n  const rotation = { \r\n    x: 0,\r\n    y: 0,\r\n    z: config.rotation ?? 0 \r\n  }\r\n\r\n  const instanceConfig = {\r\n    position,\r\n    rotation\r\n  }\r\n\r\n  app.world.instance.add(squareKey, cache.geometry, cache.material, {\r\n    ...instanceConfig,\r\n    before: mesh => {\r\n      mesh.renderOrder = 2\r\n      shadow.renderOrder = 3\r\n      shadow.receiveShadow = true\r\n      shadow.position.set(\r\n        position.x, \r\n        position.y, \r\n        position.z + 0.001\r\n      )\r\n      scene.add(shadow)\r\n    }\r\n  })\r\n\r\n  /**\r\n   * We add a second surface with the same material just a little below to simulate \r\n   * a reflexion\r\n   */  \r\n  app.world.instance.add(squareKey + '-below', cache.geometry, cache.material, { \r\n    ...instanceConfig,\r\n    position: { ...position, z: -30 },\r\n    before: mesh => {\r\n      mesh.renderOrder = 1\r\n    }\r\n  })\r\n\r\n  if( ! config.wall ) return;\r\n\r\n  config.wall.forEach(position => {\r\n    createWall(\r\n      app,\r\n      scene,\r\n      coordinates,\r\n      position,\r\n      -( app.map.squareSize / 2 ) - 1, \r\n      'cliff-underwater.png'\r\n    )\r\n  })\r\n}\r\n\r\n/**\r\n * There are not string type in glsl\r\n */\r\nconst getBorderType = name => ({\r\n  'water-regular'    : 0,\r\n  'water-one-side'   : 1,\r\n  'water-both-side'  : 2,\r\n  'water-three-side' : 3,\r\n  'water-corner'     : 4\r\n}[name])\r\n\r\nexport { renderWater }\r\n","import { renderGrass } from './grass'\n\nconst renderTree = ({\n  coordinates,\n  app,\n  config,\n  scene\n}) => {\n\n  renderGrass({ coordinates, app, scene, config })\n\n  app.world.add(\n    `./assets/ressources/world/tree/forest${config.type ?? 1}.fbx`,\n    { walkable: false },\n    tree => {\n\n      tree.position.set(\n        coordinates.x[1] - app.map.squareSize / 2, \n        coordinates.y[1] - app.map.squareSize / 2,\n        config.height ?? -10\n      )\n      \n      tree.scale.set( 0.2, 0.2, 0.2 )\n      tree.rotation.x = Math.PI / 2\n      tree.castShadow = true\n      tree.receiveShadow = true\n      \n      scene.add(tree)\n    }\n  )\n}\n\nexport { renderTree }\n","import { createWall } from './helpers/wall'\r\nimport { \r\n  PlaneGeometry, \r\n  TextureLoader,\r\n  MeshToonMaterial\r\n} from 'three'\r\n\r\nconst renderPath = ({\r\n  coordinates,\r\n  app,\r\n  scene,\r\n  config\r\n}) => {\r\n\r\n  const key = `path-${config.type ?? 'narow'}`\r\n  const cache = app.world.cache.get(\r\n    `./assets/ressources/world/path/${key}.jpg`,\r\n    url => {\r\n\r\n      const texture  = new TextureLoader().load(url)\r\n      const material = new MeshToonMaterial({ map: texture })\r\n      const geometry = new PlaneGeometry(app.map.squareSize, app.map.squareSize)\r\n      \r\n      return { geometry, material }\r\n    }\r\n  )\r\n\r\n  app.world.instance.add(key, cache.geometry, cache.material, { \r\n    before: mesh => mesh.receiveShadow = true,\r\n    position: { \r\n      x: coordinates.x[1] - app.map.squareSize / 2,\r\n      y: coordinates.y[1] - app.map.squareSize / 2,\r\n      z: 0 \r\n    }\r\n  })\r\n\r\n  if( ! config.wall ) return; \r\n\r\n  config.wall.forEach(position => {\r\n    createWall(\r\n      app, \r\n      scene, \r\n      coordinates, \r\n      position, \r\n      -( app.map.squareSize / 2 ) + 50\r\n    )\r\n  })\r\n}\r\n\r\nexport { renderPath }\r\n","const area = (x, y, data) => {\n  const response = {}\n  for (let i = x[0]; i <= x[1]; i++) {\n    for (let j = y[0]; j <= y[1]; j++) {\n      response[ `${i}|${j}` ] = data \n    }\n  }\n  return response\n}\n\nconst platform = (x, y) => ({\n  [`${x + 4}|${y + 2}`] : { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  [`${x + 3}|${y + 2}`] : { type: 'path', config: { type: 'full' } },\n  [`${x + 2}|${y + 2}`] : { type: 'path', config: { type: 'full' } },\n  [`${x + 1}|${y + 2}`] : { type: 'path', config: { type: 'full' } },\n  [`${x    }|${y + 2}`] : { type: 'water', config: { border: 'one-side', rotation: -Math.PI / 2 } },\n\n  [`${x + 4}|${y + 1}`] : { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  [`${x + 3}|${y + 1}`] : { type: 'path', config: { type: 'full' } },\n  [`${x + 2}|${y + 1}`] : { type: 'tree', config: { type: 4 } },\n  [`${x + 1}|${y + 1}`] : { type: 'path', config: { type: 'full' } },\n  [`${x    }|${y + 1}`] : { type: 'water', config: { border: 'one-side', rotation: -Math.PI / 2 } },\n\n  [`${x + 4}|${y    }`] : { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  [`${x + 3}|${y    }`] : { type: 'path', config: { type: 'full' } },\n  [`${x + 2}|${y    }`] : { type: 'path', config: { type: 'full' } },\n  [`${x + 1}|${y    }`] : { type: 'path', config: { type: 'full' } },\n  [`${x    }|${y    }`]     : { type: 'water', config: { border: 'one-side', rotation: -Math.PI / 2 } },\n})\n\nconst waterPath = (x, y) => {\n  \n  const items = [...Array(y[1] - y[0])]\n    .map((empty, index) => (index + y[0]))\n    .map((value) => ({\n        [`${x - 1}|${value}`] : { type: 'water', config: { border: 'one-side', rotation: -Math.PI / 2 } }, \n        [`${x    }|${value}`] : { type: 'path', config: { type: 'full' } }, \n        [`${x + 1}|${value}`] : { type: 'water', config: { border: 'one-side', wall: [ 'left' ], rotation: Math.PI / 2 } },\n      }))\n\n  return items.reduce((object, item) => ({\n    ...object, \n    ...item\n  }), {})\n}\n\nexport { \n  area,\n  platform,\n  waterPath\n}\n","import { \n  area, \n  platform \n} from './helpers'\n\nconst map1 = {\n\n  ...area([3, 8], [3, 15], { type: 'water' }),\n  ...area([-8, 3], [9, 15], { type: 'water' }),\n  ...area([-8, -3], [5, 9], { type: 'water' }),\n\n  '-2|8': { type: 'water' },\n  ...area([-1, 1], [8, 8], { type: 'water', config: { border: 'one-side', rotation: Math.PI } }),\n  '2|8': { type: 'water' },\n\n  ...platform(-2, 5),\n  \n  ...area([-8, -3], [4, 4], { type: 'water', config: { border: 'one-side', rotation: Math.PI } }),\n  '-2|4': { type: 'water' },\n  '-1|4': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '0|4': { type: 'path', config: { type: 'full' } },\n  '1|4': { type: 'water', config: { border: 'corner', wall: [ 'left', 'top' ], rotation: Math.PI / 2 } },\n  '2|4': { type: 'water' },\n\n  ...area([-8, -4], [3, 3], { type: 'grass' }),\n  '-3|3': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-2|3': { type: 'water', config: { border: 'corner', wall: [ 'left' ], rotation: Math.PI } },\n  '-1|3': { type: 'water', config: { border: 'one-side', rotation: - Math.PI / 2 } },\n  '0|3': { type: 'path', config: { type: 'full' } },\n  '1|3': { type: 'water', config: { border: 'one-side', wall: [ 'left' ], rotation: Math.PI / 2 } },\n  '2|3': { type: 'water' },\n\n  ...area([-6, -8], [2, 2], { type: 'grass' }),\n  '-5|2': { type: 'cliff', config: [{ position: 'bottom', height: 1 }] },\n  '-4|2': { type: 'cliff', config: [{ position: 'bottom', height: 2 }] },\n  '-3|2': { type: 'cliff', config: [{ position: 'right', height: 2 }, { position: 'bottom', height: 2 }] },\n  '-2|2': { type: 'cliff', config: [{ position: 'right', height: 1 }, { position: 'bottom', height: 1 }] },\n  '-1|2': { type: 'water', config: { border: 'three-side', wall: [ 'left' ], rotation: - Math.PI / 2 } },\n  '0|2': { type: 'path', config: { type: 'full' } },\n  '1|2': { type: 'water', config: { border: 'corner', wall: [ 'left' ], rotation: Math.PI } },\n  '2|2': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  ...area([3, 6], [2, 2], { type: 'water' }),\n  '7|2': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '8|2': { type: 'water', config: { border: 'corner', rotation: - Math.PI / 2 } },\n\n  '-8|1': { type: 'grass' },\n  '-7|1': { type: 'grass' },\n  '-6|1': { type: 'grass' },\n  '-5|1': { type: 'cliff', config: [{ position: 'bottom', height: 1 }] },\n  '-4|1': { type: 'cliff', config: [{ position: 'bottom', height: 2 }] },\n  '-3|1': { type: 'cliff', config: [{ position: 'right', height: 2 }, { position: 'bottom', height: 2 }] },\n  '-2|1': { type: 'cliff', config: [{ position: 'right', height: 1 }, { position: 'bottom', height: 1 }] },\n  '-1|1': { type: 'tree', config: { type: 2 } },\n  '0|1': { type: 'path' },\n  '1|1': { type: 'grass' },\n  '2|1': { type: 'tree', config: { type: 1 } },\n  '3|1': { type: 'water', config: { border: 'one-side', wall: [ 'left' ], rotation: Math.PI / 2 } },\n  '4|1': { type: 'water' },\n  '5|1': { type: 'water' },\n  '6|1': { type: 'water', config: { border: 'corner', rotation: - Math.PI / 2 } },\n  '7|1': { type: 'grass' },\n  '8|1': { type: 'grass' },\n\n  '-8|0': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-7|0': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-6|0': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-5|0': { type: 'tree', config: { type: 8 } },\n  '-4|0': { type: 'cliff', config: [{ position: 'bottom', height: 1 }] },\n  '-3|0': { type: 'cliff', config: [{ position: 'right', height: 1 }, { position: 'bottom', height: 1 }] },\n  '-2|0': { type: 'grass' },\n  '-1|0': { type: 'grass' },\n  '0|0': { type: 'path' },\n  '1|0': { type: 'grass' },\n  '2|0': { type: 'water', config: { border: 'three-side', wall: [ 'left', 'top' ], rotation: Math.PI } },\n  '3|0': { type: 'water' },\n  '4|0': { type: 'water' },\n  '5|0': { type: 'water', config: { border: 'corner', rotation: - Math.PI / 2 } },\n  '6|0': { type: 'grass' },\n  '7|0': { type: 'grass' },\n  '8|0': { type: 'grass' },\n\n  '-8|-1': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '-7|-1': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '-6|-1': { type: 'water' },\n  '-5|-1': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-4|-1': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-3|-1': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-2|-1': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-1|-1': { type: 'tree', config: { type: 4 } },\n  '0|-1': { type: 'path' },\n  '1|-1': { type: 'grass' },\n  '2|-1': { type: 'tree', config: { type: 3 } },\n  '3|-1': { type: 'water', config: { border: 'one-side', wall: [ 'left' ], rotation: Math.PI / 2 } },\n  '4|-1': { type: 'water', config: { border: 'one-side', rotation: - Math.PI / 2 } },\n  '5|-1': { type: 'grass' },\n  '6|-1': { type: 'grass' },\n  '7|-1': { type: 'grass' },\n  '8|-1': { type: 'grass' },\n\n  '-8|-2': { type: 'grass' },\n  '-7|-2': { type: 'grass' },\n  '-6|-2': { type: 'water', config: { border: 'corner', wall: [ 'left' ], rotation: Math.PI } },\n  '-5|-2': { type: 'water' },\n  '-4|-2': { type: 'water' },\n  '-3|-2': { type: 'water' },\n  '-2|-2': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '-1|-2': { type: 'water', config: { border: 'both-side', wall: [ 'top' ] } },\n  '0|-2': { type: 'path', config: { type: 'full', wall: [ 'right', 'left' ] } },\n  '1|-2': { type: 'water', config: { border: 'both-side', wall: [ 'top' ] } },\n  '2|-2': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '3|-2': { type: 'water' },\n  '4|-2': { type: 'water', config: { border: 'corner', rotation: - Math.PI / 2  } },\n  '5|-2': { type: 'grass' },\n  '6|-2': { type: 'water', config: { border: 'corner', rotation: Math.PI / 2, wall: [ 'left', 'top' ]  } },\n  '7|-2': { type: 'water', config: { border: 'both-side', wall: [ 'top' ] }  },\n  '8|-2': { type: 'grass' },\n\n  '-8|-3': { type: 'grass' },\n  '-7|-3': { type: 'grass' },\n  '-6|-3': { type: 'tree' },\n  '-5|-3': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-4|-3': { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  '-3|-3': { type: 'water', config: { border: 'one-side', rotation: - Math.PI / 2 } },\n  '-2|-3': { type: 'grass' },\n  '-1|-3': { type: 'grass' },\n  '0|-3': { type: 'path' },\n  '1|-3': { type: 'tree', config: { type: 1 } },\n  '2|-3': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ] } },\n  '3|-3': { type: 'water', config: { border: 'one-side', rotation: - Math.PI / 2 } },\n  '4|-3': { type: 'tree', config: { type: 4 } },\n  '5|-3': { type: 'grass' },\n  '6|-3': { type: 'water', config: { border: 'both-side', wall: [ 'left' ], rotation: - Math.PI / 2 } },\n  '7|-3': { type: 'grass' },\n  '8|-3': { type: 'grass' },\n\n  '-8|-4': { type: 'grass' },\n  '-7|-4': { type: 'grass' },\n  '-6|-4': { type: 'grass' },\n  '-5|-4': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-4|-4': { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  '-3|-4': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-2|-4': { type: 'grass' },\n  '-1|-4': { type: 'tree', config: { type: 2 } },\n  '0|-4': { type: 'path' },\n  '1|-4': { type: 'grass' },\n  '2|-4': { type: 'grass' },\n  '3|-4': { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  '4|-4': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '5|-4': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '6|-4': { type: 'water', config: { border: 'one-side', rotation: -Math.PI / 2 } },\n  '7|-4': { type: 'grass' },\n  '8|-4': { type: 'grass' },\n\n  '-8|-5': { type: 'cliff', config: { height: 2 } },\n  '-7|-5': { type: 'cliff', config: { height: 2 } },\n  '-6|-5': { type: 'cliff', config: { height: 2 } },\n  '-5|-5': { type: 'cliff', config: [{ position: 'right', height: 2 }] },\n  '-4|-5': { type: 'water', config: { border: 'both-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  '-3|-5': { type: 'cliff', config: [{ position: 'right', height: 2 }, { position: 'bottom', height: 2 }] },\n  '-2|-5': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-1|-5': { type: 'grass' },\n  '0|-5': { type: 'path' },\n  '1|-5': { type: 'grass' },\n  '2|-5': { type: 'tree', config: { type: 4 } },\n  '3|-5': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ] } },\n  '4|-5': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '5|-5': { type: 'water' },\n  '6|-5': { type: 'water' },\n  '7|-5': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '8|-5': { type: 'grass' },\n\n  '-8|-6': { type: 'cliff', config: { height: 2 } },\n  '-7|-6': { type: 'cliff', config: { height: 2 } },\n  '-6|-6': { type: 'cliff', config: { height: 2 } },\n  '-5|-6': { type: 'cliff', config: [{ position: 'right', height: 2 }, { position: 'bottom', height: 2 }] },\n  '-4|-6': { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ] } },\n  '-3|-6': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-2|-6': { type: 'cliff', config: [{ position: 'bottom', height: 1 }] },\n  '-1|-6': { type: 'cliff', config: [{ position: 'right', height: 1 }, { position: 'bottom', height: 1 }] },\n  '0|-6': { type: 'path-exit', config: { map: 'map2', square: '0|1', arrow: 'bottom' } },\n  '1|-6': { type: 'grass' },\n  '2|-6': { type: 'cliff' },\n  '3|-6': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '4|-6': { type: 'grass'},\n  '5|-6': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ] } },\n  '6|-6': { type: 'water', config: { border: 'one-side', rotation: Math.PI } },\n  '7|-6': { type: 'water', config: { border: 'corner', rotation: - Math.PI / 2 } },\n  '8|-6': { type: 'grass' },\n\n  '-8|-7': { type: 'cliff', config: { height: 2 } },\n  '-7|-7': { type: 'cliff', config: { height: 2 } },\n  '-6|-7': { type: 'cliff', config: [{ position: 'right', height: 2 }] },\n  '-5|-7': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '-4|-7': { type: 'water' },\n  '-3|-7': { type: 'water' },\n  '-2|-7': { type: 'water', config: { border: 'both-side', wall: [ 'top' ] } },\n  '-1|-7': { type: 'water', config: { border: 'three-side', wall: [ 'top' ] } },\n  '0|-7': { type: 'path' },\n  '1|-7': { type: 'cliff' },\n  '2|-7': { type: 'cliff' },\n  '3|-7': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '4|-7': { type: 'tree' },\n  '5|-7': { type: 'grass'},\n  '6|-7': { type: 'grass'},\n  '7|-7': { type: 'grass'},\n  '8|-7': { type: 'grass'},\n\n  '-8|-8': { type: 'cliff', config: { height: 2 } },\n  '-7|-8': { type: 'cliff', config: { height: 2 } },\n  '-6|-8': { type: 'cliff', config: { height: 2 } },\n  '-5|-8': { type: 'cliff', config: { height: 2 } },\n  '-4|-8': { type: 'cliff', config: { height: 2 } },\n  '-3|-8': { type: 'cliff', config: [{ position: 'right', height: 2 }] },\n  '-2|-8': { type: 'tree', config: { type: 6 } },\n  '-1|-8': { type: 'grass' },\n  '0|-8': { type: 'path' },\n  '1|-8': { type: 'cliff' },\n  '2|-8': { type: 'cliff' },\n  '3|-8': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '4|-8': { type: 'grass' },\n  '5|-8': { type: 'grass'},\n  '6|-8': { type: 'grass'},\n  '7|-8': { type: 'grass'},\n  '8|-8': { type: 'grass'},\n  \n  '-8|-9': { type: 'cliff', config: { height: 2 } },\n  '-7|-9': { type: 'cliff', config: { height: 2 } },\n  '-6|-9': { type: 'cliff', config: { height: 2 } },\n  '-5|-9': { type: 'cliff', config: { height: 2 } },\n  '-4|-9': { type: 'cliff', config: { height: 2 } },\n  '-3|-9': { type: 'cliff', config: [{ position: 'right', height: 2 }] },\n  '-2|-9': { type: 'cliff', config: {  height: 1 } },\n  '-1|-9': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  '0|-9': { type: 'path' },\n  '1|-9': { type: 'cliff' },\n  '2|-9': { type: 'cliff' },\n  '3|-9': { type: 'cliff', config: [{ position: 'right', height: 1 }] },\n  ...area([4, 8], [-9, -9], { type: 'grass' }),\n\n  ...area([-8, -3], [-10, -10], { type: 'cliff', config: { height: 2 } }),\n  ...area([-2, -1], [-10, -10], { type: 'cliff', config: [{ position: 'right', height: 2 }, { position: 'bottom', height: 2 }] }),\n  '0|-10': { type: 'path' },\n  ...area([1, 10], [-10, -10], { type: 'cliff', config: [{ position: 'bottom', height: 1 }] }),\n\n  ...area([-8, -1], [-11, -11], { type: 'grass' }),\n  '0|-11': { type: 'path' },\n  ...area([1, 8], [-11, -11], { type: 'grass' }),\n}\n\nexport { map1 }\n","import { \n  area, \n  platform,\n  waterPath \n} from './helpers'\n\nconst map2 = {\n\n  ...area([-11, 11], [-11, 11], { type : 'water' }),\n  ...waterPath(0, [3, 11]),\n\n  '-2|2': { type: 'grass' },\n\n  ...area([-4, -2], [3, 3], { type : 'water', config: { border: 'one-side', rotation: Math.PI } }),\n\n  '1|3': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ]} },\n\n  '-5|2': { type: 'water', config: { border: 'one-side', rotation: - Math.PI / 2 } },\n  ...area([-4, -2], [2, 2], { type : 'grass' }),\n  '-1|2': { type: 'water', config: { border: 'three-side', rotation: -Math.PI / 2, wall: [ 'left' ] } },\n  '0|2': { type: 'path-exit', config: { map: 'map1', square: '0|-5', arrow: 'top' } },\n  '1|2': { type: 'grass' },\n  '2|2': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ]} },\n\n  '-4|1': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-3|1': { type: 'tree', config: { type: 4 } },\n  '-2|1': { type:  'grass' },\n  '-1|1': { type: 'grass' },\n  '0|1': { type: 'path' },\n  '1|1': { type: 'tree', config: { type: 1 } },\n  '2|1': { type: 'grass' },\n  '3|1': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ]} },\n\n  '-3|0': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-2|0': { type: 'grass' },\n  '-1|0': { type: 'grass' },\n  '0|0': { type: 'path' },\n  '1|0': { type: 'grass' },\n  '2|0': { type: 'tree', config: { type: 2 } },\n  '3|0': { type: 'grass' },\n  ...area([4, 4], [-1, 0], { type: 'water', config: { border: 'one-side', rotation: Math.PI / 2, wall: [ 'left' ]} }),\n\n\n  '-2|-1': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '-1|-1': { type: 'tree', config: { type: 2 } },\n  '0|-1': { type: 'path' },\n  '1|-1': { type: 'grass' },\n  '2|-1': { type: 'grass' },\n  '3|-1': { type: 'grass' },\n\n  '-2|-2': { type: 'water' },\n  '-1|-2': { type: 'water', config: { border: 'corner', wall: [ 'top' ] } },\n  '0|-2': { type: 'path', config: { type: 'full' } },\n  '1|-2': { type: 'water', config: { border: 'three-side', rotation: Math.PI / 2, wall: [ 'top', 'left' ] } },\n  '2|-2': { type: 'grass' },\n  '3|-2': { type: 'water', config: { border: 'corner', wall: [ 'top', 'left' ], rotation: Math.PI / 2 } },\n\n  '0|-3': { type: 'path', config: { type: 'full' } },\n  '2|-3': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '1|-3': { type: 'water', config: { border: 'corner', rotation: Math.PI, wall: [ 'left' ] } },\n  '-1|-3': { type: 'water', config: { border: 'corner', rotation: -Math.PI / 2 } },\n  '-2|-3': { type: 'water' },\n\n  ...platform(-2, -6),\n\n  '0|-7': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '2|-7': { type: 'water' },\n  '1|-7': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-1|-7': { type: 'water', config: { border: 'one-side', wall: [ 'top' ] } },\n  '-2|-7': { type: 'water' },\n}\n\nexport { map2 }\n","import { map1 } from './map1'\nimport { map2 } from './map2'\n\nexport default { \n  map1, \n  map2 \n}\n","import maps from '../maps/'\nimport { renderPath } from './path'\n\nconst renderExitPath = ({\n  coordinates,\n  app,\n  config,\n  key,\n  scene\n}) => {\n\n  renderPath({ \n    app, \n    coordinates, \n    scene, \n    config: { \n      ...config,\n      type: 'narow'\n    } \n  })\n\n  const maybeLoadMap = ({\n    character\n  }) => {\n\n    if( character.name !== 'main' ) return;\n\n    const square = app.map.getSquareByCoordinates(character.object.position)\n    \n    if( square.key !== key ) return;\n\n    const mapName = config.map ?? 'map1'\n    const initialSquare = config.square ?? '0|0'\n    \n    app.map.load(\n      mapName, \n      maps[ mapName ], \n      initialSquare\n    )\n\n    app.hooks.removeAction('characterMoved', maybeLoadMap)\n  }\n\n  /**\n   * Leave the map when character arrive on the square\n   */\n  app.hooks.addAction('characterMoved', maybeLoadMap)\n}\n\nexport { renderExitPath }\n","import { renderCliff } from './cliff'\nimport { renderGrass } from './grass'\nimport { renderWater } from './water'\nimport { renderTree } from './tree'\nimport { renderPath } from './path'\nimport { renderExitPath } from './path-exit'\n\nconst registerSquares = app =>  {\n\n  app.map.registerSquareType('cliff', {\n    render   : renderCliff,\n    walkable : false\n  })\n\n  app.map.registerSquareType('grass', {\n    render   : renderGrass,\n    walkable : true\n  })\n\n  app.map.registerSquareType('water', {\n    render   : renderWater,\n    walkable : false\n  })\n\n  app.map.registerSquareType('tree', {\n    render   : renderTree,\n    walkable : true\n  })\n\n  app.map.registerSquareType('path', {\n    render   : renderPath,\n    walkable : true\n  })\n\n  app.map.registerSquareType('path-exit', {\n    render   : renderExitPath,\n    walkable : true\n  })\n}\n\nexport { \n  registerSquares,\n}\n","export default [\n  // River -> Central path -> Side of the bridge\n  character => character.actions.moveToSquare.start('0|-2', {}, 'walk'),\n  character => character.actions.moveToSquare.start('0|-2', { x: -50 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // Side of the bridge -> Top of path -> River\n  character => character.actions.moveToSquare.start('-2|0', { x: -50 }, 'walk'),\n  character => character.actions.moveToSquare.start('-2|0', { x: -50, y: -50 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // River -> Top of the path -> Side of the bridge\n  character => character.actions.moveToSquare.start('0|-2', {}, 'walk'),\n  character => character.actions.moveToSquare.start('0|-2', { x: 50 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // Side of the bridge -> Bottom of the path -> River\n  character => character.actions.moveToSquare.start('2|-4', {}, 'walk'),\n  character => character.actions.moveToSquare.start('2|-4', { y: +50 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // Start again!\n]\n","export default [\n  // Go next to the sea\n  character => character.actions.moveToSquare.start('1|-5', {}, 'walk'),\n  character => character.actions.moveToSquare.start('1|-5', { x: +75 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // Go on the other side\n  character => character.actions.moveToSquare.start('1|-5', {}, 'walk'),\n  character => character.actions.moveToSquare.start('0|-6', {}, 'walk'),\n  character => character.actions.moveToSquare.start('-1|-5', {}, 'walk'),\n  character => character.actions.moveToSquare.start('-1|-5', { x: -75 }, 'walk'),\n  // Wait for 5 second\n  character => character.actions.wait.start(5000, 'stretch'),\n  // Go back to the initial position\n  character => character.actions.moveToSquare.start('-1|-5', {}, 'walk'),\n  character => character.actions.moveToSquare.start('-1|-4', {}, 'walk'),\n  // Start again!\n]\n","import story1 from './character1'\nimport story2 from './character2'\n\nexport default [\n  story1,\n  story2\n]\n","const createCharacter = (\n  app, \n  name, \n  color, \n  callback = false, \n  attributes = {}\n) => {\n\n  const folder = './assets/ressources/characters/'\n  \n  /**\n   * Give possibiity to change default url for the texture (use different texture for npc)\n   */\n  const changeTexture = url => (\n    url.includes('Peasant Nolant') && url.includes('.png')\n      ? folder + 'peasant/' + color + '.png'\n      : url\n  )\n  app.hooks.addFilter('loadRessourceURL', changeTexture)\n\n  app.characters.add({\n    name       : name,\n    file       : folder + 'peasant/peasant.fbx',\n    card       : folder + 'main/main.png',\n    animations : {\n      run     : folder + 'peasant/animations/run.fbx', \n      idle    : folder + 'peasant/animations/idle.fbx',\n      angry   : folder + 'peasant/animations/angry.fbx',\n      walk    : folder + 'peasant/animations/walk.fbx',\n      stretch : folder + 'peasant/animations/stretch.fbx',\n      sit     : folder + 'peasant/animations/sit.fbx',\n      look    : folder + 'peasant/animations/look.fbx',\n    },\n    attributes : {\n      speed: {\n        run: 0.5,\n        walk: 0.13\n      },\n      ...attributes\n    }\n  }, character => {\n\n    /**\n     * Only the main character has the privilege of the hat\n     */\n    if( character.name !== 'main' ) {\n      character.object.children[1].removeFromParent()\n    }\n    character.object.scale.set(0.5, 0.5, 0.5)\n    character.object.rotation.x = Math.PI / 2\n\n    app.hooks.removeFilter('loadRessourceURL', changeTexture)\n    callback(character)\n  })\n}\n\nexport default createCharacter\n","import {\r\n  ShaderMaterial,\r\n  Color,\r\n  FrontSide,\r\n  AdditiveBlending,\r\n  Mesh,\r\n  MeshBasicMaterial,\r\n  BoxGeometry,\r\n\tSphereGeometry\r\n} from 'three'\r\n\r\nimport GlowFragment from '../shaders/glow.fragment.glsl'\r\nimport GlowVertex from '../shaders/glow.vertex.glsl'\r\n\r\nimport maps from '../maps/'\r\nimport stories from './stories/'\r\nimport createCharacter from './create'\r\n\r\nconst init = app => {\r\n\r\n  /**\r\n   * Main character\r\n   */\r\n  createCharacter(app, 'main', 'yellow', character => {\r\n    app.characters.setMain(character.name)\r\n    app.map.load('map1', maps['map1'], '0|0')\r\n  })\r\n\r\n  /**\r\n   * NPC on map1\r\n   */\r\n  app.hooks.addAction('mapLoaded', args => {\r\n\r\n    if( args.name !== 'map1' ) return;\r\n\r\n    createCharacter(app, 'peasant1', 'brown', character => {\r\n\r\n      app.map.current.scene.add(character.object)\r\n      app.map.moveCharacterOnSquare('2|-4', character)\r\n\r\n      // Loop on defined actions\r\n      const doAction = index => {\r\n        if( app.map.current.name !== 'map1' ) return;\r\n        stories[0][ index ](character).then(() => doAction(\r\n          stories[0].length - 1 !== index ? index + 1 : 0 \r\n        ))\r\n      }\r\n      doAction(0)\r\n    })\r\n  })\r\n\r\n  /**\r\n   * NPC on map2\r\n   */\r\n  app.hooks.addAction('mapLoaded', args => {\r\n\r\n    if( args.name !== 'map2' ) return;\r\n\r\n    createCharacter(app, 'peasant2', 'green', character => {\r\n      \r\n      app.map.current.scene.add(character.object)\r\n      app.map.moveCharacterOnSquare('0|-1', character)\r\n\r\n      // Loop on defined actions\r\n      const doAction = index => {\r\n        if( app.map.current.name !== 'map2' ) return;\r\n        stories[1][ index ](character).then(() => doAction(\r\n          stories[1].length - 1 !== index ? index + 1 : 0 \r\n        ))\r\n      }\r\n      doAction(0)\r\n    })\r\n\r\n    createCharacter(app, 'peasant3', 'blue', character => {\r\n\r\n      app.map.current.scene.add(character.object)\r\n\r\n      const coordinates = app.map.getCoordinateBySquare('2|-2')\r\n      character.startAnimation('sit')\r\n      character.object.position.set(\r\n        coordinates.x - 75,\r\n        coordinates.y - 100,\r\n        -10\r\n      )\r\n    })\r\n  })\r\n\r\n  /**\r\n   * Highlight character on mouseover\r\n   */\r\n  app.hooks.addAction('mapLoaded', args => {\r\n\r\n    /**\r\n     * @see https://github.com/stemkoski/stemkoski.github.com/blob/master/Three.js/Shader-Glow.html\r\n     */\r\n    const mesh = app.world.cache.get('glow-material', () => {\r\n\r\n      const sphere = new SphereGeometry(app.map.squareSize / 4, 15, 15)\r\n      const material = new ShaderMaterial({\r\n        vertexShader   : GlowVertex,\r\n        fragmentShader : GlowFragment,\r\n        side           : FrontSide,\r\n        blending       : AdditiveBlending,\r\n        transparent    : true,\r\n        uniforms       : { \r\n          c          : { type: 'f',  value: 1.0 },\r\n          p          : { type: 'f',  value: 4.2 },\r\n          glowColor  : { type: 'c',  value: new Color(0xFFFF00) },\r\n          viewVector : { type: 'v3', value: app.camera.position }\r\n        }\r\n      })\r\n      \r\n      const mesh = new Mesh(sphere, material) \r\n      mesh.renderOrder = 2 \r\n      \r\n      return mesh\r\n    })\r\n\r\n    app.hooks.addAction('mouseEnterCharacter', ({ character }) => {\r\n      if( character.name === 'main' ) app.map.current.scene.remove(mesh)\r\n    })\r\n\r\n    app.hooks.addAction('mouseOnCharacter', ({ character }) => {\r\n      if( character.name === 'main' ) return app.map.current.scene.remove(mesh)\r\n      mesh.position.set(\r\n        character.object.position.x,\r\n        character.object.position.y,\r\n        character.object.position.z + app.map.squareSize / 4\r\n      )\r\n      app.map.current.scene.add(mesh)\r\n    })\r\n\r\n    app.hooks.addAction('mouseLeaveCharacter', () => {\r\n      app.map.current.scene.remove(mesh)\r\n    })\r\n  })\r\n}\r\n\r\nexport { init }\r\n","export default [\n  {\n    character: 'helpful-peasant',\n    content: [\n      \"Do you think this blue thing is supposed to be a river?\",\n      \"I'm sorry, that's a rhetorical question. You can't really participate to any conversations in this world, for now at least. I've heard it might change in the future.\",\n      \"I can give you a few tips if you want.\"\n    ],\n  },\n  {\n    character: 'helpful-peasant',\n    content: [\n      \"First, you can change the position of the camera by pressing C. It will switch to a top-down view.\",\n      \"Some hitboxes are a bit wide, especially near the trees. Changing the view can help you visualize this.\"\n    ],\n  },\n  {\n    character: 'helpful-peasant',\n    content: [\n      \"You can leave this map and head toward a small island by following the path down. There are other people there but they don't have a lot to say.\",\n      \"If you choose to go there, you can still come back afterward.\"\n    ]\n  },\n  {\n    character: 'helpful-peasant',\n    content: [\n      \"Lastly, if you are interested in the code running this, it is available on GitHub in this following repository:\",\n      { \n        type: 'link', \n        content: 'discount-elysium repository',\n        url: \"https://github.com/nicolas-jaussaud/discount-elysium\" \n      },\n      \"You can also take a look at the Discore repository and its documentation, it's the library used in discount-elysium.\",\n      { \n        type: 'link', \n        content: 'discore repository', \n        url: \"https://github.com/nicolas-jaussaud/discore\"\n      },\n      { \n        type: 'link', \n        content: 'discore documentation', \n        url: \"https://nicolas-jaussaud.github.io/discore/\" \n      },\n      \"If you visit the Discore documentation, please be aware that I don't know how to write and that it will be full of typos.\"\n    ],\n  },\n];\n","export default [\n  {\n    character: 'peasant',\n    content: [\n      \"Are we on a floating platform? Is this a peninsula? I can't discern whether it's a lake, a sea, or perhaps a river.\",\n      \"I wish I could spend my day relaxing, but this place doesn't make any sense.\"\n    ],\n  },\n];\n","export default [\n  {\n    character: 'chill-peasant',\n    content: [\n      \"Take a moment to relax, my friend. Enjoy the journey.\"\n    ],\n  },\n];\n","import conversation1 from './conversation1'\nimport conversation2 from './conversation2'\nimport conversation3 from './conversation3'\n\nconst init = (app, discussions) => {\n\n  discussions.characters.add('helpful-peasant', {\n    name  : 'Helpful peasant',\n    color : '#467964',\n    image : './assets/ressources/characters/peasant/images/brown.png'\n  })\n\n  discussions.characters.add('chill-peasant', {\n    name  : 'Chill peasant',\n    color : '#346786',\n    image : './assets/ressources/characters/peasant/images/blue.png'\n  })\n\n  discussions.characters.add('peasant', {\n    name  : 'Confused peasant',\n    color : '#719b8f',\n    image : './assets/ressources/characters/peasant/images/green.png'\n  })\n\n  /**\n   * Hooks trigger in discore when user click on a character\n   * \n   * If character NPC, we move to the character and if the charater is still there when we arrive\n   * we open the associated conversation\n   */\n  app.hooks.addAction('clickOnCharacter', ({ character }) => followAndTalk(character, discussions))\n}\n\nconst openConversation = (discussions, app, character) => {\n  switch(character) {\n    case 'peasant1':\n      app.stop()\n      discussions.open(conversation1, app.start)\n      break;\n    case 'peasant2':\n      app.stop()\n      discussions.open(conversation2, app.start)\n      break;\n    case 'peasant3':\n      app.stop()\n      discussions.open(conversation3, app.start)\n      break;\n  }\n}\n\nconst followAndTalk = (character, discussions, prevSquare = false) => {\n\n  const main = app.characters.getMain()\n  \n  /**\n   * Start conversation only when main user will be next to character\n   */\n  main.actions.move.start(\n    character.object.position.x,\n    character.object.position.y,\n    0\n  ).then(() => {\n\n    const characterSquare = app.map.getSquareByCoordinates({\n      x: character.object.position.x,\n      y: character.object.position.y\n    })\n    const currentSquare = app.map.getSquareByCoordinates({\n      x: main.object.position.x,\n      y: main.object.position.y\n    })\n\n    if( currentSquare.key !== characterSquare.key ) {\n      if( currentSquare !== prevSquare) followAndTalk(character, discussions, currentSquare)\n      return;\n    }\n\n    openConversation(discussions, app, character.name)\n  })\n      \n}\n\nexport { init }\n","import {\n  DirectionalLight,\n  HemisphereLight,\n  CameraHelper\n} from 'three'\n\nimport { registerSquares } from './squares'\nimport { init as initCharacters } from './characters'\nimport { init as initConversations } from './conversations/'\n\nconst init = () => {\n\n  /**\n   * @see ./discore/src\n   */\n  const app = discore.init({\n    element     : document.getElementById('app'),\n    environment : window.environment ?? process.env.NODE_ENV\n  })\n\n  /**\n   * @see ./discursed/src\n   */\n  const discussions = discursed.init({\n    element: document.getElementById('discussions')\n  })\n\n  registerSquares(app)\n\n  initCharacters(app)\n  initConversations(app, discussions)\n\n  const hemiLight = new HemisphereLight(0xFFFFFF, 0xFFFFFF, 0.7)\n  const sideLight = new DirectionalLight('rgb(255, 255, 255)', 0.1)\n\n  /**\n   * The directional light shadows works like an orthographic camera, and we need to \n   * set up left/right/top/bottom/near/far in order to see the shadows correctly\n   * \n   * @see https://threejs.org/docs/#api/en/lights/shadows/DirectionalLightShadow\n   * @see https://stackoverflow.com/a/73590527/10491705\n   * @see https://stackoverflow.com/a/44547936/10491705\n   */\n  sideLight.position.set(500, 500, 1000)\n  sideLight.castShadow = true\n  sideLight.shadow.camera.left = 2000\n  sideLight.shadow.camera.right = -2000\n  sideLight.shadow.camera.top = 2000\n  sideLight.shadow.camera.bottom = -2000\n  sideLight.shadow.camera.near = 0.1\n  sideLight.shadow.camera.far = 10000\n  \n  if( app.environment === 'development' ) {\n    app.hooks.addAction('loadComplete', () => {    \n      app.map.current.scene.add( \n        new CameraHelper( sideLight.shadow.camera ) \n      )\n    })\n  }\n\n  app.lights.push(hemiLight)\n  app.lights.push(sideLight)\n\n  /**\n   * For better performances, we only render the shadows once one the initial load\n   * instead of on every frame\n   * \n   * The drawback is that we won't have shadows for characters\n   */\n  app.hooks.addAction('mapLoaded', () => app.renderer.shadowMap.autoUpdate = true)\n  app.hooks.addAction('loadComplete', () => app.renderer.shadowMap.autoUpdate = false)\n\n  window.addEventListener('resize', () => app.updateSize(window.innerWidth, window.innerHeight))\n  window.app = app\n} \n\nwindow.addEventListener('load', init)\n"],"names":["__name","init","app","initCharacters","initConversations"],"mappings":"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"}