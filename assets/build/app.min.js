var Me=Object.defineProperty;var c=(b,v)=>Me(b,"name",{value:v,configurable:!0});(function(){"use strict";(function(){const e={NODE_ENV:"production"};try{if(process){process.env=Object.assign({},process.env),Object.assign(process.env,e);return}}catch{}globalThis.process={env:e}})();var b=Object.defineProperty,v=c((e,t)=>b(e,"name",{value:t,configurable:!0}),"i$3");const R=v((e,t,a,o)=>{const i=e.world.cache.get("cliff-mesh",()=>{const r=new window.discore.THREE.MeshToonMaterial({map:new window.discore.THREE.TextureLoader().load("./assets/ressources/world/cliff/cliff.jpg")}),n=new window.discore.THREE.MeshToonMaterial({map:new window.discore.THREE.TextureLoader().load("./assets/ressources/world/grass/grass.avif")});return{geometry:new window.discore.THREE.BoxGeometry(e.map.squareSize,e.map.squareSize,e.map.squareSize),material:[r,r,r,r,n,r]}});for(let r=0;r<o.height;r++)e.world.instance.add("cliff-mesh",i.geometry,i.material,{position:{x:a.x[1]-e.map.squareSize/2,y:a.y[1]-e.map.squareSize/2,z:e.map.squareSize/2+e.map.squareSize*r},before:n=>{n.receiveShadow=!0,n.castShadow=!0,n.walkable=!1}})},"createCliff");var O=Object.defineProperty,H=c((e,t)=>O(e,"name",{value:t,configurable:!0}),"a$2");const C=H(({scene:e,coordinates:t,app:a,config:o})=>{let i=o.height??1;Array.isArray(o)||(o=[{height:i}]),o.forEach(r=>{R(a,e,t,r),i=i<r.height?r.height:i})},"renderCliff");var B=Object.defineProperty,A=c((e,t)=>B(e,"name",{value:t,configurable:!0}),"t$3");const S=A(({scene:e,coordinates:t,app:a})=>{const o=a.world.cache.get("./assets/ressources/world/grass/grass.avif",i=>{const r=new window.discore.THREE.TextureLoader().load(i),n=new window.discore.THREE.MeshToonMaterial({map:r}),s=new window.discore.THREE.PlaneGeometry(a.map.squareSize,a.map.squareSize);return{material:n,geometry:s}});a.world.instance.add("grass",o.geometry,o.material,{before:i=>i.receiveShadow=!0,position:{x:t.x[1]-a.map.squareSize/2,y:t.y[1]-a.map.squareSize/2,z:0}})},"renderGrass");var L=`varying vec3 vPosition;

/**
 * uBorder 0 => No border 
 * uBorder 1 => One side
 * uBorder 2 => Two side
 * uBorder 3 => Three side
 * uBorder 4 => Corner
 */
uniform int uBorder;
uniform float uTime;

const float OPACITY = 0.4;
const vec3 BLUE = vec3( 0.2, 0.65, 0.95 );
const vec3 WHITE = vec3( 1. );

const float BORDER_POSITION = 80.;
const float BORDER_AMPLITUDE = 2.;

float getLimit(float position) {
  float wave = sin((1./32.) * position + uTime);
  return wave * BORDER_AMPLITUDE + BORDER_POSITION;
}

void main() {

  gl_FragColor = vec4( BLUE, 0.6 );
 
  if( uBorder == 0 ) return;
  
  if( vPosition.y > getLimit(vPosition.x) ) {
    gl_FragColor = vec4( WHITE, OPACITY );
    return;
  }

  bool hasBottom = uBorder == 2 || uBorder == 3;
  if( hasBottom && vPosition.y < -getLimit(vPosition.x) ) {
    gl_FragColor = vec4( WHITE, OPACITY );
    return;
  }

  bool hasRight = uBorder == 3 || uBorder == 4;
  if( hasRight && vPosition.x > getLimit(-vPosition.y) ) {
    gl_FragColor = vec4( WHITE, OPACITY );
    return;
  }
}


`,_=`varying vec3 vPosition;

void main() {

  vPosition = position;
  
  vec4 modelViewPosition = modelViewMatrix * vec4( position, 1.0 );
  vec4 projectedPosition = projectionMatrix * modelViewPosition;

  gl_Position = projectionMatrix * viewMatrix * modelMatrix * instanceMatrix * vec4(position, 1.0);
}
`,D=Object.defineProperty,F=c((e,t)=>D(e,"name",{value:t,configurable:!0}),"m$5");const E=F((e,t,a,o,i,r=!1)=>{const n=r==="cliff-underwater.png",s=e.world.cache.get(`./assets/ressources/world/cliff/${r||"cliff.jpg"}`,l=>{const g=new window.discore.THREE.TextureLoader().load(l),m=new window.discore.THREE.BoxGeometry(e.map.squareSize,n?0:40,e.map.squareSize),u=new window.discore.THREE.MeshToonMaterial({map:g,transparent:n}),h=new window.discore.THREE.MeshToonMaterial({color:4604471,transparent:n});return{geometry:m,material:[h,h,h,u,h,h]}}),f={x:0,y:0,z:0},d={x:a.x[1]-e.map.squareSize/2,y:a.y[1]-e.map.squareSize/2,z:i??0};switch(o){case"top":d.y=d.y+e.map.squareSize/2+(n?0:20);break;case"right":f.z=Math.PI/2,d.x=d.x+e.map.squareSize/2+(n?0:20);break;case"left":f.z=Math.PI/2,d.x=d.x-e.map.squareSize/2-(n?0:20);break}e.world.instance.add(`cliff-mesh-${r}`,s.geometry,s.material,{position:d,rotation:f,before:l=>{l.receiveShadow=!0,l.castShadow=!0}})},"createWall");var N=Object.defineProperty,P=c((e,t)=>N(e,"name",{value:t,configurable:!0}),"m$4");const G=P(({coordinates:e,app:t,scene:a,config:o={}})=>{const i=`water-${o.border??"regular"}`,r=t.world.cache.get(i,l=>{const g={uBorder:{value:V(l)},uTime:{value:0}},m=new window.discore.THREE.ShaderMaterial({vertexShader:_,fragmentShader:L,transparent:!0,uniforms:g}),u=P(()=>{m.uniforms.uTime.value+=.05,requestAnimationFrame(u)},"animate");return requestAnimationFrame(u),{geometry:new window.discore.THREE.PlaneGeometry(t.map.squareSize,t.map.squareSize),material:m}}),n=t.world.cache.get("water-shadow",()=>{const l=new window.discore.THREE.PlaneGeometry(t.map.squareSize,t.map.squareSize),g=new window.discore.THREE.ShadowMaterial({opacity:.25,color:410477});return new window.discore.THREE.Mesh(l,g)}).clone(),s={x:e.x[1]-t.map.squareSize/2,y:e.y[1]-t.map.squareSize/2,z:-20},f={x:0,y:0,z:o.rotation??0},d={position:s,rotation:f};t.world.instance.add(i,r.geometry,r.material,{...d,before:l=>{l.renderOrder=2,n.renderOrder=3,n.receiveShadow=!0,n.position.set(s.x,s.y,s.z+.001),a.add(n)}}),t.world.instance.add(i+"-below",r.geometry,r.material,{...d,position:{...s,z:-30},before:l=>{l.renderOrder=1}}),o.wall&&o.wall.forEach(l=>{E(t,a,e,l,-(t.map.squareSize/2)-1,"cliff-underwater.png")})},"renderWater"),V=P(e=>({"water-regular":0,"water-one-side":1,"water-both-side":2,"water-three-side":3,"water-corner":4})[e],"getBorderType");var U=Object.defineProperty,W=c((e,t)=>U(e,"name",{value:t,configurable:!0}),"o$4");const Y=W(({coordinates:e,app:t,config:a,scene:o})=>{S({coordinates:e,app:t,scene:o,config:a}),t.world.add(`./assets/ressources/world/tree/forest${a.type??1}.fbx`,{walkable:!1},i=>{i.position.set(e.x[1]-t.map.squareSize/2,e.y[1]-t.map.squareSize/2,a.height??-10),i.scale.set(.2,.2,.2),i.rotation.x=Math.PI/2,i.castShadow=!0,i.receiveShadow=!0,o.add(i)})},"renderTree");var J=Object.defineProperty,K=c((e,t)=>J(e,"name",{value:t,configurable:!0}),"m$3");const $=K(({coordinates:e,app:t,scene:a,config:o})=>{const i=`path-${o.type??"narow"}`,r=t.world.cache.get(`./assets/ressources/world/path/${i}.jpg`,n=>{const s=new window.discore.THREE.TextureLoader().load(n),f=new window.discore.THREE.MeshToonMaterial({map:s});return{geometry:new window.discore.THREE.PlaneGeometry(t.map.squareSize,t.map.squareSize),material:f}});t.world.instance.add(i,r.geometry,r.material,{before:n=>n.receiveShadow=!0,position:{x:e.x[1]-t.map.squareSize/2,y:e.y[1]-t.map.squareSize/2,z:0}}),o.wall&&o.wall.forEach(n=>{E(t,a,e,n,-(t.map.squareSize/2)+50)})},"renderPath");var Q=Object.defineProperty,M=c((e,t)=>Q(e,"name",{value:t,configurable:!0}),"p$1");const p=M((e,t,a)=>{const o={};for(let i=e[0];i<=e[1];i++)for(let r=t[0];r<=t[1];r++)o[`${i}|${r}`]=a;return o},"area"),x=M((e,t)=>({[`${e+4}|${t+2}`]:{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},[`${e+3}|${t+2}`]:{type:"path",config:{type:"full"}},[`${e+2}|${t+2}`]:{type:"path",config:{type:"full"}},[`${e+1}|${t+2}`]:{type:"path",config:{type:"full"}},[`${e}|${t+2}`]:{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},[`${e+4}|${t+1}`]:{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},[`${e+3}|${t+1}`]:{type:"path",config:{type:"full"}},[`${e+2}|${t+1}`]:{type:"tree",config:{type:4}},[`${e+1}|${t+1}`]:{type:"path",config:{type:"full"}},[`${e}|${t+1}`]:{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},[`${e+4}|${t}`]:{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},[`${e+3}|${t}`]:{type:"path",config:{type:"full"}},[`${e+2}|${t}`]:{type:"path",config:{type:"full"}},[`${e+1}|${t}`]:{type:"path",config:{type:"full"}},[`${e}|${t}`]:{type:"water",config:{border:"one-side",rotation:-Math.PI/2}}}),"platform"),X=M((e,t)=>[...Array(t[1]-t[0])].map((a,o)=>o+t[0]).map(a=>({[`${e-1}|${a}`]:{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},[`${e}|${a}`]:{type:"path",config:{type:"full"}},[`${e+1}|${a}`]:{type:"water",config:{border:"one-side",wall:["left"],rotation:Math.PI/2}}})).reduce((a,o)=>({...a,...o}),{}),"waterPath"),Z={...p([3,8],[3,15],{type:"water"}),...p([-8,3],[9,15],{type:"water"}),...p([-8,-3],[5,9],{type:"water"}),"-2|8":{type:"water"},...p([-1,1],[8,8],{type:"water",config:{border:"one-side",rotation:Math.PI}}),"2|8":{type:"water"},...x(-2,5),...p([-8,-3],[4,4],{type:"water",config:{border:"one-side",rotation:Math.PI}}),"-2|4":{type:"water"},"-1|4":{type:"water",config:{border:"corner",wall:["top"]}},"0|4":{type:"path",config:{type:"full"}},"1|4":{type:"water",config:{border:"corner",wall:["left","top"],rotation:Math.PI/2}},"2|4":{type:"water"},...p([-8,-4],[3,3],{type:"grass"}),"-3|3":{type:"cliff",config:[{position:"right",height:1}]},"-2|3":{type:"water",config:{border:"corner",wall:["left"],rotation:Math.PI}},"-1|3":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},"0|3":{type:"path",config:{type:"full"}},"1|3":{type:"water",config:{border:"one-side",wall:["left"],rotation:Math.PI/2}},"2|3":{type:"water"},...p([-6,-8],[2,2],{type:"grass"}),"-5|2":{type:"cliff",config:[{position:"bottom",height:1}]},"-4|2":{type:"cliff",config:[{position:"bottom",height:2}]},"-3|2":{type:"cliff",config:[{position:"right",height:2},{position:"bottom",height:2}]},"-2|2":{type:"cliff",config:[{position:"right",height:1},{position:"bottom",height:1}]},"-1|2":{type:"water",config:{border:"three-side",wall:["left"],rotation:-Math.PI/2}},"0|2":{type:"path",config:{type:"full"}},"1|2":{type:"water",config:{border:"corner",wall:["left"],rotation:Math.PI}},"2|2":{type:"water",config:{border:"one-side",rotation:Math.PI}},...p([3,6],[2,2],{type:"water"}),"7|2":{type:"water",config:{border:"one-side",rotation:Math.PI}},"8|2":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"-8|1":{type:"grass"},"-7|1":{type:"grass"},"-6|1":{type:"grass"},"-5|1":{type:"cliff",config:[{position:"bottom",height:1}]},"-4|1":{type:"cliff",config:[{position:"bottom",height:2}]},"-3|1":{type:"cliff",config:[{position:"right",height:2},{position:"bottom",height:2}]},"-2|1":{type:"cliff",config:[{position:"right",height:1},{position:"bottom",height:1}]},"-1|1":{type:"tree",config:{type:2}},"0|1":{type:"path"},"1|1":{type:"grass"},"2|1":{type:"tree",config:{type:1}},"3|1":{type:"water",config:{border:"one-side",wall:["left"],rotation:Math.PI/2}},"4|1":{type:"water"},"5|1":{type:"water"},"6|1":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"7|1":{type:"grass"},"8|1":{type:"grass"},"-8|0":{type:"water",config:{border:"one-side",wall:["top"]}},"-7|0":{type:"water",config:{border:"one-side",wall:["top"]}},"-6|0":{type:"water",config:{border:"corner",wall:["top"]}},"-5|0":{type:"tree",config:{type:8}},"-4|0":{type:"cliff",config:[{position:"bottom",height:1}]},"-3|0":{type:"cliff",config:[{position:"right",height:1},{position:"bottom",height:1}]},"-2|0":{type:"grass"},"-1|0":{type:"grass"},"0|0":{type:"path"},"1|0":{type:"grass"},"2|0":{type:"water",config:{border:"three-side",wall:["left","top"],rotation:Math.PI}},"3|0":{type:"water"},"4|0":{type:"water"},"5|0":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"6|0":{type:"grass"},"7|0":{type:"grass"},"8|0":{type:"grass"},"-8|-1":{type:"water",config:{border:"one-side",rotation:Math.PI}},"-7|-1":{type:"water",config:{border:"one-side",rotation:Math.PI}},"-6|-1":{type:"water"},"-5|-1":{type:"water",config:{border:"one-side",wall:["top"]}},"-4|-1":{type:"water",config:{border:"one-side",wall:["top"]}},"-3|-1":{type:"water",config:{border:"one-side",wall:["top"]}},"-2|-1":{type:"water",config:{border:"corner",wall:["top"]}},"-1|-1":{type:"tree",config:{type:4}},"0|-1":{type:"path"},"1|-1":{type:"grass"},"2|-1":{type:"tree",config:{type:3}},"3|-1":{type:"water",config:{border:"one-side",wall:["left"],rotation:Math.PI/2}},"4|-1":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},"5|-1":{type:"grass"},"6|-1":{type:"grass"},"7|-1":{type:"grass"},"8|-1":{type:"grass"},"-8|-2":{type:"grass"},"-7|-2":{type:"grass"},"-6|-2":{type:"water",config:{border:"corner",wall:["left"],rotation:Math.PI}},"-5|-2":{type:"water"},"-4|-2":{type:"water"},"-3|-2":{type:"water"},"-2|-2":{type:"water",config:{border:"one-side",rotation:Math.PI}},"-1|-2":{type:"water",config:{border:"both-side",wall:["top"]}},"0|-2":{type:"path",config:{type:"full",wall:["right","left"]}},"1|-2":{type:"water",config:{border:"both-side",wall:["top"]}},"2|-2":{type:"water",config:{border:"one-side",wall:["top"]}},"3|-2":{type:"water"},"4|-2":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"5|-2":{type:"grass"},"6|-2":{type:"water",config:{border:"corner",rotation:Math.PI/2,wall:["left","top"]}},"7|-2":{type:"water",config:{border:"both-side",wall:["top"]}},"8|-2":{type:"grass"},"-8|-3":{type:"grass"},"-7|-3":{type:"grass"},"-6|-3":{type:"tree"},"-5|-3":{type:"cliff",config:[{position:"right",height:1}]},"-4|-3":{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},"-3|-3":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},"-2|-3":{type:"grass"},"-1|-3":{type:"grass"},"0|-3":{type:"path"},"1|-3":{type:"tree",config:{type:1}},"2|-3":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"3|-3":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},"4|-3":{type:"tree",config:{type:4}},"5|-3":{type:"grass"},"6|-3":{type:"water",config:{border:"both-side",wall:["left"],rotation:-Math.PI/2}},"7|-3":{type:"grass"},"8|-3":{type:"grass"},"-8|-4":{type:"grass"},"-7|-4":{type:"grass"},"-6|-4":{type:"grass"},"-5|-4":{type:"cliff",config:[{position:"right",height:1}]},"-4|-4":{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},"-3|-4":{type:"cliff",config:[{position:"right",height:1}]},"-2|-4":{type:"grass"},"-1|-4":{type:"tree",config:{type:2}},"0|-4":{type:"path"},"1|-4":{type:"grass"},"2|-4":{type:"grass"},"3|-4":{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},"4|-4":{type:"water",config:{border:"one-side",wall:["top"]}},"5|-4":{type:"water",config:{border:"one-side",wall:["top"]}},"6|-4":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},"7|-4":{type:"grass"},"8|-4":{type:"grass"},"-8|-5":{type:"cliff",config:{height:2}},"-7|-5":{type:"cliff",config:{height:2}},"-6|-5":{type:"cliff",config:{height:2}},"-5|-5":{type:"cliff",config:[{position:"right",height:2}]},"-4|-5":{type:"water",config:{border:"both-side",rotation:Math.PI/2,wall:["left"]}},"-3|-5":{type:"cliff",config:[{position:"right",height:2},{position:"bottom",height:2}]},"-2|-5":{type:"cliff",config:[{position:"right",height:1}]},"-1|-5":{type:"grass"},"0|-5":{type:"path"},"1|-5":{type:"grass"},"2|-5":{type:"tree",config:{type:4}},"3|-5":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"4|-5":{type:"water",config:{border:"one-side",rotation:Math.PI}},"5|-5":{type:"water"},"6|-5":{type:"water"},"7|-5":{type:"water",config:{border:"corner",wall:["top"]}},"8|-5":{type:"grass"},"-8|-6":{type:"cliff",config:{height:2}},"-7|-6":{type:"cliff",config:{height:2}},"-6|-6":{type:"cliff",config:{height:2}},"-5|-6":{type:"cliff",config:[{position:"right",height:2},{position:"bottom",height:2}]},"-4|-6":{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}},"-3|-6":{type:"water",config:{border:"corner",wall:["top"]}},"-2|-6":{type:"cliff",config:[{position:"bottom",height:1}]},"-1|-6":{type:"cliff",config:[{position:"right",height:1},{position:"bottom",height:1}]},"0|-6":{type:"path-exit",config:{map:"map2",square:"0|1",arrow:"bottom"}},"1|-6":{type:"grass"},"2|-6":{type:"cliff"},"3|-6":{type:"cliff",config:[{position:"right",height:1}]},"4|-6":{type:"grass"},"5|-6":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"6|-6":{type:"water",config:{border:"one-side",rotation:Math.PI}},"7|-6":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"8|-6":{type:"grass"},"-8|-7":{type:"cliff",config:{height:2}},"-7|-7":{type:"cliff",config:{height:2}},"-6|-7":{type:"cliff",config:[{position:"right",height:2}]},"-5|-7":{type:"cliff",config:[{position:"right",height:1}]},"-4|-7":{type:"water"},"-3|-7":{type:"water"},"-2|-7":{type:"water",config:{border:"both-side",wall:["top"]}},"-1|-7":{type:"water",config:{border:"three-side",wall:["top"]}},"0|-7":{type:"path"},"1|-7":{type:"cliff"},"2|-7":{type:"cliff"},"3|-7":{type:"cliff",config:[{position:"right",height:1}]},"4|-7":{type:"tree"},"5|-7":{type:"grass"},"6|-7":{type:"grass"},"7|-7":{type:"grass"},"8|-7":{type:"grass"},"-8|-8":{type:"cliff",config:{height:2}},"-7|-8":{type:"cliff",config:{height:2}},"-6|-8":{type:"cliff",config:{height:2}},"-5|-8":{type:"cliff",config:{height:2}},"-4|-8":{type:"cliff",config:{height:2}},"-3|-8":{type:"cliff",config:[{position:"right",height:2}]},"-2|-8":{type:"tree",config:{type:6}},"-1|-8":{type:"grass"},"0|-8":{type:"path"},"1|-8":{type:"cliff"},"2|-8":{type:"cliff"},"3|-8":{type:"cliff",config:[{position:"right",height:1}]},"4|-8":{type:"grass"},"5|-8":{type:"grass"},"6|-8":{type:"grass"},"7|-8":{type:"grass"},"8|-8":{type:"grass"},"-8|-9":{type:"cliff",config:{height:2}},"-7|-9":{type:"cliff",config:{height:2}},"-6|-9":{type:"cliff",config:{height:2}},"-5|-9":{type:"cliff",config:{height:2}},"-4|-9":{type:"cliff",config:{height:2}},"-3|-9":{type:"cliff",config:[{position:"right",height:2}]},"-2|-9":{type:"cliff",config:{height:1}},"-1|-9":{type:"cliff",config:[{position:"right",height:1}]},"0|-9":{type:"path"},"1|-9":{type:"cliff"},"2|-9":{type:"cliff"},"3|-9":{type:"cliff",config:[{position:"right",height:1}]},...p([4,8],[-9,-9],{type:"grass"}),...p([-8,-3],[-10,-10],{type:"cliff",config:{height:2}}),...p([-2,-1],[-10,-10],{type:"cliff",config:[{position:"right",height:2},{position:"bottom",height:2}]}),"0|-10":{type:"path"},...p([1,10],[-10,-10],{type:"cliff",config:[{position:"bottom",height:1}]}),...p([-8,-1],[-11,-11],{type:"grass"}),"0|-11":{type:"path"},...p([1,8],[-11,-11],{type:"grass"})},ee={...p([-11,11],[-11,11],{type:"water"}),...X(0,[3,11]),"-2|2":{type:"grass"},...p([-4,-2],[3,3],{type:"water",config:{border:"one-side",rotation:Math.PI}}),"1|3":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"-5|2":{type:"water",config:{border:"one-side",rotation:-Math.PI/2}},...p([-4,-2],[2,2],{type:"grass"}),"-1|2":{type:"water",config:{border:"three-side",rotation:-Math.PI/2,wall:["left"]}},"0|2":{type:"path-exit",config:{map:"map1",square:"0|-5",arrow:"top"}},"1|2":{type:"grass"},"2|2":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"-4|1":{type:"water",config:{border:"corner",wall:["top"]}},"-3|1":{type:"tree",config:{type:4}},"-2|1":{type:"grass"},"-1|1":{type:"grass"},"0|1":{type:"path"},"1|1":{type:"tree",config:{type:1}},"2|1":{type:"grass"},"3|1":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"-3|0":{type:"water",config:{border:"corner",wall:["top"]}},"-2|0":{type:"grass"},"-1|0":{type:"grass"},"0|0":{type:"path"},"1|0":{type:"grass"},"2|0":{type:"tree",config:{type:2}},"3|0":{type:"grass"},...p([4,4],[-1,0],{type:"water",config:{border:"one-side",rotation:Math.PI/2,wall:["left"]}}),"-2|-1":{type:"water",config:{border:"corner",wall:["top"]}},"-1|-1":{type:"tree",config:{type:2}},"0|-1":{type:"path"},"1|-1":{type:"grass"},"2|-1":{type:"grass"},"3|-1":{type:"grass"},"-2|-2":{type:"water"},"-1|-2":{type:"water",config:{border:"corner",wall:["top"]}},"0|-2":{type:"path",config:{type:"full"}},"1|-2":{type:"water",config:{border:"three-side",rotation:Math.PI/2,wall:["top","left"]}},"2|-2":{type:"grass"},"3|-2":{type:"water",config:{border:"corner",wall:["top","left"],rotation:Math.PI/2}},"0|-3":{type:"path",config:{type:"full"}},"2|-3":{type:"water",config:{border:"one-side",wall:["top"]}},"1|-3":{type:"water",config:{border:"corner",rotation:Math.PI,wall:["left"]}},"-1|-3":{type:"water",config:{border:"corner",rotation:-Math.PI/2}},"-2|-3":{type:"water"},...x(-2,-6),"0|-7":{type:"water",config:{border:"one-side",wall:["top"]}},"2|-7":{type:"water"},"1|-7":{type:"water",config:{border:"one-side",wall:["top"]}},"-1|-7":{type:"water",config:{border:"one-side",wall:["top"]}},"-2|-7":{type:"water"}};var q={map1:Z,map2:ee},te=Object.defineProperty,k=c((e,t)=>te(e,"name",{value:t,configurable:!0}),"t$2");const oe=k(({coordinates:e,app:t,config:a,key:o,scene:i})=>{$({app:t,coordinates:e,scene:i,config:{...a,type:"narow"}});const r=k(({character:n})=>{if(n.name!=="main"||t.map.getSquareByCoordinates(n.object.position).key!==o)return;const s=a.map??"map1",f=a.square??"0|0";t.map.load(s,q[s],f),t.hooks.removeAction("characterMoved",r)},"maybeLoadMap");t.hooks.addAction("characterMoved",r)},"renderExitPath");var ae=Object.defineProperty,re=c((e,t)=>ae(e,"name",{value:t,configurable:!0}),"r$2");const ie=re(e=>{e.map.registerSquareType("cliff",{render:C,walkable:!1}),e.map.registerSquareType("grass",{render:S,walkable:!0}),e.map.registerSquareType("water",{render:G,walkable:!1}),e.map.registerSquareType("tree",{render:Y,walkable:!0}),e.map.registerSquareType("path",{render:$,walkable:!0}),e.map.registerSquareType("path-exit",{render:oe,walkable:!0})},"registerSquares");var ne=`uniform vec3 glowColor;
varying float intensity;

// @see https://stemkoski.github.io/Three.js/Shader-Glow.html
void main() {
	
  vec3 glow = glowColor * intensity;
  
  gl_FragColor = vec4( glow, 1.0 );
}
`,se=`uniform vec3 viewVector;
uniform float c;
uniform float p;
varying float intensity;

// @see https://stemkoski.github.io/Three.js/Shader-Glow.html
void main() {
  
  vec3 vNormal = normalize( normalMatrix * normal );
	vec3 vNormel = normalize( normalMatrix * viewVector );
	
  intensity = pow( c - dot(vNormal, vNormel), p );
	
  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );
}
`,pe=[e=>e.actions.moveToSquare.start("0|-2",{},"walk"),e=>e.actions.moveToSquare.start("0|-2",{x:-50},"walk"),e=>e.actions.wait.start(5e3,"stretch"),e=>e.actions.moveToSquare.start("-2|0",{x:-50},"walk"),e=>e.actions.moveToSquare.start("-2|0",{x:-50,y:-50},"walk"),e=>e.actions.wait.start(5e3,"stretch"),e=>e.actions.moveToSquare.start("0|-2",{},"walk"),e=>e.actions.moveToSquare.start("0|-2",{x:50},"walk"),e=>e.actions.wait.start(5e3,"stretch"),e=>e.actions.moveToSquare.start("2|-4",{},"walk"),e=>e.actions.moveToSquare.start("2|-4",{y:50},"walk"),e=>e.actions.wait.start(5e3,"stretch")],ce=[e=>e.actions.moveToSquare.start("1|-5",{},"walk"),e=>e.actions.moveToSquare.start("1|-5",{x:75},"walk"),e=>e.actions.wait.start(5e3,"stretch"),e=>e.actions.moveToSquare.start("1|-5",{},"walk"),e=>e.actions.moveToSquare.start("0|-6",{},"walk"),e=>e.actions.moveToSquare.start("-1|-5",{},"walk"),e=>e.actions.moveToSquare.start("-1|-5",{x:-75},"walk"),e=>e.actions.wait.start(5e3,"stretch"),e=>e.actions.moveToSquare.start("-1|-5",{},"walk"),e=>e.actions.moveToSquare.start("-1|-4",{},"walk")],y=[pe,ce],le=Object.defineProperty,z=c((e,t)=>le(e,"name",{value:t,configurable:!0}),"t");const w=z((e,t,a,o=!1,i={})=>{const r="./assets/ressources/characters/",n=z(s=>s.includes("Peasant Nolant")&&s.includes(".png")?r+"peasant/"+a+".png":s,"changeTexture");e.hooks.addFilter("loadRessourceURL",n),e.characters.add({name:t,file:r+"peasant/peasant.fbx",card:r+"main/main.png",animations:{run:r+"peasant/animations/run.fbx",idle:r+"peasant/animations/idle.fbx",angry:r+"peasant/animations/angry.fbx",walk:r+"peasant/animations/walk.fbx",stretch:r+"peasant/animations/stretch.fbx",sit:r+"peasant/animations/sit.fbx",look:r+"peasant/animations/look.fbx"},attributes:{speed:{run:.5,walk:.13},...i}},s=>{s.name!=="main"&&s.object.children[1].removeFromParent(),s.object.scale.set(.5,.5,.5),s.object.rotation.x=Math.PI/2,e.hooks.removeFilter("loadRessourceURL",n),o(s)})},"createCharacter");var de=Object.defineProperty,T=c((e,t)=>de(e,"name",{value:t,configurable:!0}),"m$1");const fe=T(e=>{w(e,"main","yellow",t=>{e.characters.setMain(t.name),e.map.load("map1",q.map1,"0|0")}),e.hooks.addAction("mapLoaded",t=>{t.name==="map1"&&w(e,"peasant1","brown",a=>{e.map.current.scene.add(a.object),e.map.moveCharacterOnSquare("2|-4",a);const o=T(i=>{e.map.current.name==="map1"&&y[0][i](a).then(()=>o(y[0].length-1!==i?i+1:0))},"doAction");o(0)})}),e.hooks.addAction("mapLoaded",t=>{t.name==="map2"&&(w(e,"peasant2","green",a=>{e.map.current.scene.add(a.object),e.map.moveCharacterOnSquare("0|-1",a);const o=T(i=>{e.map.current.name==="map2"&&y[1][i](a).then(()=>o(y[1].length-1!==i?i+1:0))},"doAction");o(0)}),w(e,"peasant3","blue",a=>{e.map.current.scene.add(a.object);const o=e.map.getCoordinateBySquare("2|-2");a.startAnimation("sit"),a.object.position.set(o.x-75,o.y-100,-10)}))}),e.hooks.addAction("mapLoaded",t=>{const a=e.world.cache.get("glow-material",()=>{const o=new window.discore.THREE.SphereGeometry(e.map.squareSize/4,15,15),i=new window.discore.THREE.ShaderMaterial({vertexShader:se,fragmentShader:ne,side:window.discore.THREE.FrontSide,blending:window.discore.THREE.AdditiveBlending,transparent:!0,uniforms:{c:{type:"f",value:1},p:{type:"f",value:4.2},glowColor:{type:"c",value:new window.discore.THREE.Color(16776960)},viewVector:{type:"v3",value:e.camera.position}}}),r=new window.discore.THREE.Mesh(o,i);return r.renderOrder=2,r});e.hooks.addAction("mouseEnterCharacter",({character:o})=>{o.name==="main"&&e.map.current.scene.remove(a)}),e.hooks.addAction("mouseOnCharacter",({character:o})=>{if(o.name==="main")return e.map.current.scene.remove(a);a.position.set(o.object.position.x,o.object.position.y,o.object.position.z+e.map.squareSize/4),e.map.current.scene.add(a)}),e.hooks.addAction("mouseLeaveCharacter",()=>{e.map.current.scene.remove(a)})})},"init");var ge=[{character:"helpful-peasant",content:["Do you think this blue thing is supposed to be a river?","I'm sorry, that's a rhetorical question. You can't really participate to any conversations in this world, for now at least. I've heard it might change in the future.","I can give you a few tips if you want."]},{character:"helpful-peasant",content:["First, you can change the position of the camera by pressing C. It will switch to a top-down view.","Some hitboxes are a bit wide, especially near the trees. Changing the view can help you visualize this."]},{character:"helpful-peasant",content:["You can leave this map and head toward a small island by following the path down. There are other people there but they don't have a lot to say.","If you choose to go there, you can still come back afterward."]},{character:"helpful-peasant",content:["Lastly, if you are interested in the code running this, it is available on GitHub in this following repository:",{type:"link",content:"discount-elysium repository",url:"https://github.com/nicolas-jaussaud/discount-elysium"},"You can also take a look at the Discore repository and its documentation, it's the library used in discount-elysium.",{type:"link",content:"discore repository",url:"https://github.com/nicolas-jaussaud/discore"},{type:"link",content:"discore documentation",url:"https://nicolas-jaussaud.github.io/discore/"},"If you visit the Discore documentation, please be aware that I don't know how to write and that it will be full of typos."]}],he=[{character:"peasant",content:["Are we on a floating platform? Is this a peninsula? I can't discern whether it's a lake, a sea, or perhaps a river.","I wish I could spend my day relaxing, but this place doesn't make any sense."]}],ye=[{character:"chill-peasant",content:["Take a moment to relax, my friend. Enjoy the journey."]}],we=Object.defineProperty,I=c((e,t)=>we(e,"name",{value:t,configurable:!0}),"o");const me=I((e,t)=>{t.characters.add("helpful-peasant",{name:"Helpful peasant",color:"#467964",image:"./assets/ressources/characters/peasant/images/brown.png"}),t.characters.add("chill-peasant",{name:"Chill peasant",color:"#346786",image:"./assets/ressources/characters/peasant/images/blue.png"}),t.characters.add("peasant",{name:"Confused peasant",color:"#719b8f",image:"./assets/ressources/characters/peasant/images/green.png"}),e.hooks.addAction("clickOnCharacter",({character:a})=>j(a,t))},"init"),ue=I((e,t,a)=>{switch(a){case"peasant1":t.stop(),e.open(ge,t.start);break;case"peasant2":t.stop(),e.open(he,t.start);break;case"peasant3":t.stop(),e.open(ye,t.start);break}},"openConversation"),j=I((e,t,a=!1)=>{const o=app.characters.getMain();o.actions.move.start(e.object.position.x,e.object.position.y,0).then(()=>{const i=app.map.getSquareByCoordinates({x:e.object.position.x,y:e.object.position.y}),r=app.map.getSquareByCoordinates({x:o.object.position.x,y:o.object.position.y});if(r.key!==i.key){r!==a&&j(e,t,r);return}ue(t,app,e.name)})},"followAndTalk");var be=Object.defineProperty,ve=c((e,t)=>be(e,"name",{value:t,configurable:!0}),"i");const Pe=ve(()=>{const e=discore.init({element:document.getElementById("app"),environment:window.environment??process.env.NODE_ENV}),t=discursed.init({element:document.getElementById("discussions")});ie(e),fe(e),me(e,t);const a=new window.discore.THREE.HemisphereLight(16777215,16777215,.7),o=new window.discore.THREE.DirectionalLight("rgb(255, 255, 255)",.1);o.position.set(500,500,1e3),o.castShadow=!0,o.shadow.camera.left=2e3,o.shadow.camera.right=-2e3,o.shadow.camera.top=2e3,o.shadow.camera.bottom=-2e3,o.shadow.camera.near=.1,o.shadow.camera.far=1e4,e.environment==="development"&&e.hooks.addAction("loadComplete",()=>{e.map.current.scene.add(new window.discore.THREE.CameraHelper(o.shadow.camera))}),e.lights.push(a),e.lights.push(o),e.hooks.addAction("mapLoaded",()=>e.renderer.shadowMap.autoUpdate=!0),e.hooks.addAction("loadComplete",()=>e.renderer.shadowMap.autoUpdate=!1),window.addEventListener("resize",()=>e.updateSize(window.innerWidth,window.innerHeight)),window.app=e},"init");window.addEventListener("load",Pe)})();
//# sourceMappingURL=app.min.js.map
