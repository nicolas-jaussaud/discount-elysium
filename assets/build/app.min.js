(function () {
    'use strict';

    (function() {
        const env = {"NODE_ENV":"development"};
        try {
            if (process) {
                process.env = Object.assign({}, process.env);
                Object.assign(process.env, env);
                return;
            }
        } catch (e) {} // avoid ReferenceError: process is not defined
        globalThis.process = { env:env };
    })();

    var __defProp$d = Object.defineProperty;
    var __name$d = (target, value) => __defProp$d(target, "name", { value, configurable: true });

    const createCliff = /* @__PURE__ */ __name$d((app, scene, coordinates, config) => {
      const cache = app.world.cache.get(
        `cliff-mesh`,
        () => {
          const cliffMaterial = new window.discore.THREE.MeshToonMaterial({
            map: new window.discore.THREE.TextureLoader().load("./assets/ressources/world/cliff/cliff.jpg")
          });
          const grassMaterial = new window.discore.THREE.MeshToonMaterial({
            map: new window.discore.THREE.TextureLoader().load("./assets/ressources/world/grass/grass.avif")
          });
          const geometry = new window.discore.THREE.BoxGeometry(
            app.map.squareSize,
            app.map.squareSize,
            app.map.squareSize
          );
          return {
            geometry,
            material: [
              cliffMaterial,
              cliffMaterial,
              cliffMaterial,
              cliffMaterial,
              grassMaterial,
              cliffMaterial
            ]
          };
        }
      );
      for (let height = 0; height < config.height; height++) {
        app.world.instance.add("cliff-mesh", cache.geometry, cache.material, {
          position: {
            x: coordinates.x[1] - app.map.squareSize / 2,
            y: coordinates.y[1] - app.map.squareSize / 2,
            z: app.map.squareSize / 2 + app.map.squareSize * height
          },
          before: (mesh) => {
            mesh.receiveShadow = true;
            mesh.castShadow = true;
            mesh.walkable = false;
          }
        });
      }
    }, "createCliff");

    var __defProp$c = Object.defineProperty;
    var __name$c = (target, value) => __defProp$c(target, "name", { value, configurable: true });
    const renderCliff = /* @__PURE__ */ __name$c(({
      scene,
      coordinates,
      app,
      config
    }) => {
      let maxHeight = config.height ?? 1;
      if (!Array.isArray(config))
        config = [{ height: maxHeight }];
      config.forEach((cliff) => {
        createCliff(app, scene, coordinates, cliff);
        maxHeight = maxHeight < cliff.height ? cliff.height : maxHeight;
      });
    }, "renderCliff");

    var __defProp$b = Object.defineProperty;
    var __name$b = (target, value) => __defProp$b(target, "name", { value, configurable: true });

    const renderGrass = /* @__PURE__ */ __name$b(({
      scene,
      coordinates,
      app
    }) => {
      const cache = app.world.cache.get(
        `./assets/ressources/world/grass/grass.avif`,
        (url) => {
          const texture = new window.discore.THREE.TextureLoader().load(url);
          const material = new window.discore.THREE.MeshToonMaterial({ map: texture });
          const geometry = new window.discore.THREE.PlaneGeometry(app.map.squareSize, app.map.squareSize);
          return { material, geometry };
        }
      );
      app.world.instance.add("grass", cache.geometry, cache.material, {
        before: (mesh) => mesh.receiveShadow = true,
        position: {
          x: coordinates.x[1] - app.map.squareSize / 2,
          y: coordinates.y[1] - app.map.squareSize / 2,
          z: 0
        }
      });
    }, "renderGrass");

    var WaterFragment = "varying vec3 vPosition;\n\n/**\n * uBorder 0 => No border \n * uBorder 1 => One side\n * uBorder 2 => Two side\n * uBorder 3 => Three side\n * uBorder 4 => Corner\n */\nuniform int uBorder;\nuniform float uTime;\n\nconst float OPACITY = 0.4;\nconst vec3 BLUE = vec3( 0.2, 0.65, 0.95 );\nconst vec3 WHITE = vec3( 1. );\n\nconst float BORDER_POSITION = 80.;\nconst float BORDER_AMPLITUDE = 2.;\n\nfloat getLimit(float position) {\n  float wave = sin((1./32.) * position + uTime);\n  return wave * BORDER_AMPLITUDE + BORDER_POSITION;\n}\n\nvoid main() {\n\n  gl_FragColor = vec4( BLUE, 0.6 );\n \n  if( uBorder == 0 ) return;\n  \n  if( vPosition.y > getLimit(vPosition.x) ) {\n    gl_FragColor = vec4( WHITE, OPACITY );\n    return;\n  }\n\n  bool hasBottom = uBorder == 2 || uBorder == 3;\n  if( hasBottom && vPosition.y < -getLimit(vPosition.x) ) {\n    gl_FragColor = vec4( WHITE, OPACITY );\n    return;\n  }\n\n  bool hasRight = uBorder == 3 || uBorder == 4;\n  if( hasRight && vPosition.x > getLimit(-vPosition.y) ) {\n    gl_FragColor = vec4( WHITE, OPACITY );\n    return;\n  }\n}\n\n\n";

    var WaterVertex = "varying vec3 vPosition;\n\nvoid main() {\n\n  vPosition = position;\n  \n  vec4 modelViewPosition = modelViewMatrix * vec4( position, 1.0 );\n  vec4 projectedPosition = projectionMatrix * modelViewPosition;\n\n  gl_Position = projectionMatrix * viewMatrix * modelMatrix * instanceMatrix * vec4(position, 1.0);\n}\n";

    var __defProp$a = Object.defineProperty;
    var __name$a = (target, value) => __defProp$a(target, "name", { value, configurable: true });

    const createWall = /* @__PURE__ */ __name$a((app, scene, coordinates, direction, height, type = false) => {
      const isUnderwater = type === "cliff-underwater.png";
      const cache = app.world.cache.get(
        `./assets/ressources/world/cliff/${type ? type : "cliff.jpg"}`,
        (url) => {
          const texture = new window.discore.THREE.TextureLoader().load(url);
          const geometry = new window.discore.THREE.BoxGeometry(
            app.map.squareSize,
            isUnderwater ? 0 : 40,
            app.map.squareSize
          );
          const imageMaterial = new window.discore.THREE.MeshToonMaterial({
            map: texture,
            transparent: isUnderwater
          });
          const colorMaterial = new window.discore.THREE.MeshToonMaterial({
            color: 4604471,
            transparent: isUnderwater
          });
          return {
            geometry,
            material: [
              colorMaterial,
              colorMaterial,
              colorMaterial,
              imageMaterial,
              colorMaterial,
              colorMaterial
            ]
          };
        }
      );
      const rotation = { x: 0, y: 0, z: 0 };
      const position = {
        x: coordinates.x[1] - app.map.squareSize / 2,
        y: coordinates.y[1] - app.map.squareSize / 2,
        z: height ?? 0
      };
      switch (direction) {
        case "top":
          position.y = position.y + app.map.squareSize / 2 + (isUnderwater ? 0 : 20);
          break;
        case "right":
          rotation.z = Math.PI / 2;
          position.x = position.x + app.map.squareSize / 2 + (isUnderwater ? 0 : 20);
          break;
        case "left":
          rotation.z = Math.PI / 2;
          position.x = position.x - app.map.squareSize / 2 - (isUnderwater ? 0 : 20);
          break;
      }
      app.world.instance.add(`cliff-mesh-${type}`, cache.geometry, cache.material, {
        position,
        rotation,
        before: (mesh) => {
          mesh.receiveShadow = true;
          mesh.castShadow = true;
        }
      });
    }, "createWall");

    var __defProp$9 = Object.defineProperty;
    var __name$9 = (target, value) => __defProp$9(target, "name", { value, configurable: true });
    const renderWater = /* @__PURE__ */ __name$9(({
      coordinates,
      app,
      scene,
      config = {}
    }) => {
      const squareKey = `water-${config.border ?? "regular"}`;
      const cache = app.world.cache.get(
        squareKey,
        (type) => {
          const uniforms = {
            uBorder: { value: getBorderType(type) },
            uTime: { value: 0 }
          };
          const material = new window.discore.THREE.ShaderMaterial({
            vertexShader: WaterVertex,
            fragmentShader: WaterFragment,
            transparent: true,
            uniforms
          });
          setInterval(() => {
            if (material.uniforms)
              material.uniforms.uTime.value += 0.1;
          }, 25);
          const geometry = new window.discore.THREE.PlaneGeometry(app.map.squareSize, app.map.squareSize);
          return { geometry, material };
        }
      );
      const shadow = app.world.cache.get(
        "water-shadow",
        () => {
          const geometry = new window.discore.THREE.PlaneGeometry(app.map.squareSize, app.map.squareSize);
          const material = new window.discore.THREE.ShadowMaterial({
            opacity: 0.25,
            color: 410477
          });
          return new window.discore.THREE.Mesh(geometry, material);
        }
      ).clone();
      const position = {
        x: coordinates.x[1] - app.map.squareSize / 2,
        y: coordinates.y[1] - app.map.squareSize / 2,
        z: -20
      };
      const rotation = {
        x: 0,
        y: 0,
        z: config.rotation ?? 0
      };
      const instanceConfig = {
        position,
        rotation
      };
      app.world.instance.add(squareKey, cache.geometry, cache.material, {
        ...instanceConfig,
        before: (mesh) => {
          mesh.renderOrder = 2;
          shadow.renderOrder = 3;
          shadow.receiveShadow = true;
          shadow.position.set(
            position.x,
            position.y,
            position.z + 1e-3
          );
          scene.add(shadow);
        }
      });
      app.world.instance.add(squareKey + "-below", cache.geometry, cache.material, {
        ...instanceConfig,
        position: { ...position, z: -30 },
        before: (mesh) => {
          mesh.renderOrder = 1;
        }
      });
      if (!config.wall)
        return;
      config.wall.forEach((position2) => {
        createWall(
          app,
          scene,
          coordinates,
          position2,
          -(app.map.squareSize / 2) - 1,
          "cliff-underwater.png"
        );
      });
    }, "renderWater");
    const getBorderType = /* @__PURE__ */ __name$9((name) => ({
      "water-regular": 0,
      "water-one-side": 1,
      "water-both-side": 2,
      "water-three-side": 3,
      "water-corner": 4
    })[name], "getBorderType");

    var __defProp$8 = Object.defineProperty;
    var __name$8 = (target, value) => __defProp$8(target, "name", { value, configurable: true });
    const renderTree = /* @__PURE__ */ __name$8(({
      coordinates,
      app,
      config,
      scene
    }) => {
      renderGrass({ coordinates, app, scene, config });
      app.world.add(
        `./assets/ressources/world/tree/forest${config.type ?? 1}.fbx`,
        { walkable: false },
        (tree) => {
          tree.position.set(
            coordinates.x[1] - app.map.squareSize / 2,
            coordinates.y[1] - app.map.squareSize / 2,
            config.height ?? -10
          );
          tree.scale.set(0.2, 0.2, 0.2);
          tree.rotation.x = Math.PI / 2;
          tree.castShadow = true;
          tree.receiveShadow = true;
          scene.add(tree);
        }
      );
    }, "renderTree");

    var __defProp$7 = Object.defineProperty;
    var __name$7 = (target, value) => __defProp$7(target, "name", { value, configurable: true });

    const renderPath = /* @__PURE__ */ __name$7(({
      coordinates,
      app,
      scene,
      config
    }) => {
      const key = `path-${config.type ?? "narow"}`;
      const cache = app.world.cache.get(
        `./assets/ressources/world/path/${key}.jpg`,
        (url) => {
          const texture = new window.discore.THREE.TextureLoader().load(url);
          const material = new window.discore.THREE.MeshToonMaterial({ map: texture });
          const geometry = new window.discore.THREE.PlaneGeometry(app.map.squareSize, app.map.squareSize);
          return { geometry, material };
        }
      );
      app.world.instance.add(key, cache.geometry, cache.material, {
        before: (mesh) => mesh.receiveShadow = true,
        position: {
          x: coordinates.x[1] - app.map.squareSize / 2,
          y: coordinates.y[1] - app.map.squareSize / 2,
          z: 0
        }
      });
      if (!config.wall)
        return;
      config.wall.forEach((position) => {
        createWall(
          app,
          scene,
          coordinates,
          position,
          -(app.map.squareSize / 2) + 50
        );
      });
    }, "renderPath");

    var __defProp$6 = Object.defineProperty;
    var __name$6 = (target, value) => __defProp$6(target, "name", { value, configurable: true });
    const area = /* @__PURE__ */ __name$6((x, y, data) => {
      const response = {};
      for (let i = x[0]; i <= x[1]; i++) {
        for (let j = y[0]; j <= y[1]; j++) {
          response[`${i}|${j}`] = data;
        }
      }
      return response;
    }, "area");
    const platform = /* @__PURE__ */ __name$6((x, y) => ({
      [`${x + 4}|${y + 2}`]: { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      [`${x + 3}|${y + 2}`]: { type: "path", config: { type: "full" } },
      [`${x + 2}|${y + 2}`]: { type: "path", config: { type: "full" } },
      [`${x + 1}|${y + 2}`]: { type: "path", config: { type: "full" } },
      [`${x}|${y + 2}`]: { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      [`${x + 4}|${y + 1}`]: { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      [`${x + 3}|${y + 1}`]: { type: "path", config: { type: "full" } },
      [`${x + 2}|${y + 1}`]: { type: "tree", config: { type: 4 } },
      [`${x + 1}|${y + 1}`]: { type: "path", config: { type: "full" } },
      [`${x}|${y + 1}`]: { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      [`${x + 4}|${y}`]: { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      [`${x + 3}|${y}`]: { type: "path", config: { type: "full" } },
      [`${x + 2}|${y}`]: { type: "path", config: { type: "full" } },
      [`${x + 1}|${y}`]: { type: "path", config: { type: "full" } },
      [`${x}|${y}`]: { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } }
    }), "platform");
    const waterPath = /* @__PURE__ */ __name$6((x, y) => {
      const items = [...Array(y[1] - y[0])].map((empty, index) => index + y[0]).map((value) => ({
        [`${x - 1}|${value}`]: { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
        [`${x}|${value}`]: { type: "path", config: { type: "full" } },
        [`${x + 1}|${value}`]: { type: "water", config: { border: "one-side", wall: ["left"], rotation: Math.PI / 2 } }
      }));
      return items.reduce((object, item) => ({
        ...object,
        ...item
      }), {});
    }, "waterPath");

    const map1 = {
      ...area([3, 8], [3, 15], { type: "water" }),
      ...area([-8, 3], [9, 15], { type: "water" }),
      ...area([-8, -3], [5, 9], { type: "water" }),
      "-2|8": { type: "water" },
      ...area([-1, 1], [8, 8], { type: "water", config: { border: "one-side", rotation: Math.PI } }),
      "2|8": { type: "water" },
      ...platform(-2, 5),
      ...area([-8, -3], [4, 4], { type: "water", config: { border: "one-side", rotation: Math.PI } }),
      "-2|4": { type: "water" },
      "-1|4": { type: "water", config: { border: "corner", wall: ["top"] } },
      "0|4": { type: "path", config: { type: "full" } },
      "1|4": { type: "water", config: { border: "corner", wall: ["left", "top"], rotation: Math.PI / 2 } },
      "2|4": { type: "water" },
      ...area([-8, -4], [3, 3], { type: "grass" }),
      "-3|3": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-2|3": { type: "water", config: { border: "corner", wall: ["left"], rotation: Math.PI } },
      "-1|3": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      "0|3": { type: "path", config: { type: "full" } },
      "1|3": { type: "water", config: { border: "one-side", wall: ["left"], rotation: Math.PI / 2 } },
      "2|3": { type: "water" },
      ...area([-6, -8], [2, 2], { type: "grass" }),
      "-5|2": { type: "cliff", config: [{ position: "bottom", height: 1 }] },
      "-4|2": { type: "cliff", config: [{ position: "bottom", height: 2 }] },
      "-3|2": { type: "cliff", config: [{ position: "right", height: 2 }, { position: "bottom", height: 2 }] },
      "-2|2": { type: "cliff", config: [{ position: "right", height: 1 }, { position: "bottom", height: 1 }] },
      "-1|2": { type: "water", config: { border: "three-side", wall: ["left"], rotation: -Math.PI / 2 } },
      "0|2": { type: "path", config: { type: "full" } },
      "1|2": { type: "water", config: { border: "corner", wall: ["left"], rotation: Math.PI } },
      "2|2": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      ...area([3, 6], [2, 2], { type: "water" }),
      "7|2": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "8|2": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "-8|1": { type: "grass" },
      "-7|1": { type: "grass" },
      "-6|1": { type: "grass" },
      "-5|1": { type: "cliff", config: [{ position: "bottom", height: 1 }] },
      "-4|1": { type: "cliff", config: [{ position: "bottom", height: 2 }] },
      "-3|1": { type: "cliff", config: [{ position: "right", height: 2 }, { position: "bottom", height: 2 }] },
      "-2|1": { type: "cliff", config: [{ position: "right", height: 1 }, { position: "bottom", height: 1 }] },
      "-1|1": { type: "tree", config: { type: 2 } },
      "0|1": { type: "path" },
      "1|1": { type: "grass" },
      "2|1": { type: "tree", config: { type: 1 } },
      "3|1": { type: "water", config: { border: "one-side", wall: ["left"], rotation: Math.PI / 2 } },
      "4|1": { type: "water" },
      "5|1": { type: "water" },
      "6|1": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "7|1": { type: "grass" },
      "8|1": { type: "grass" },
      "-8|0": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-7|0": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-6|0": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-5|0": { type: "tree", config: { type: 8 } },
      "-4|0": { type: "cliff", config: [{ position: "bottom", height: 1 }] },
      "-3|0": { type: "cliff", config: [{ position: "right", height: 1 }, { position: "bottom", height: 1 }] },
      "-2|0": { type: "grass" },
      "-1|0": { type: "grass" },
      "0|0": { type: "path" },
      "1|0": { type: "grass" },
      "2|0": { type: "water", config: { border: "three-side", wall: ["left", "top"], rotation: Math.PI } },
      "3|0": { type: "water" },
      "4|0": { type: "water" },
      "5|0": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "6|0": { type: "grass" },
      "7|0": { type: "grass" },
      "8|0": { type: "grass" },
      "-8|-1": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "-7|-1": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "-6|-1": { type: "water" },
      "-5|-1": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-4|-1": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-3|-1": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-2|-1": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-1|-1": { type: "tree", config: { type: 4 } },
      "0|-1": { type: "path" },
      "1|-1": { type: "grass" },
      "2|-1": { type: "tree", config: { type: 3 } },
      "3|-1": { type: "water", config: { border: "one-side", wall: ["left"], rotation: Math.PI / 2 } },
      "4|-1": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      "5|-1": { type: "grass" },
      "6|-1": { type: "grass" },
      "7|-1": { type: "grass" },
      "8|-1": { type: "grass" },
      "-8|-2": { type: "grass" },
      "-7|-2": { type: "grass" },
      "-6|-2": { type: "water", config: { border: "corner", wall: ["left"], rotation: Math.PI } },
      "-5|-2": { type: "water" },
      "-4|-2": { type: "water" },
      "-3|-2": { type: "water" },
      "-2|-2": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "-1|-2": { type: "water", config: { border: "both-side", wall: ["top"] } },
      "0|-2": { type: "path", config: { type: "full", wall: ["right", "left"] } },
      "1|-2": { type: "water", config: { border: "both-side", wall: ["top"] } },
      "2|-2": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "3|-2": { type: "water" },
      "4|-2": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "5|-2": { type: "grass" },
      "6|-2": { type: "water", config: { border: "corner", rotation: Math.PI / 2, wall: ["left", "top"] } },
      "7|-2": { type: "water", config: { border: "both-side", wall: ["top"] } },
      "8|-2": { type: "grass" },
      "-8|-3": { type: "grass" },
      "-7|-3": { type: "grass" },
      "-6|-3": { type: "tree" },
      "-5|-3": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-4|-3": { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      "-3|-3": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      "-2|-3": { type: "grass" },
      "-1|-3": { type: "grass" },
      "0|-3": { type: "path" },
      "1|-3": { type: "tree", config: { type: 1 } },
      "2|-3": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "3|-3": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      "4|-3": { type: "tree", config: { type: 4 } },
      "5|-3": { type: "grass" },
      "6|-3": { type: "water", config: { border: "both-side", wall: ["left"], rotation: -Math.PI / 2 } },
      "7|-3": { type: "grass" },
      "8|-3": { type: "grass" },
      "-8|-4": { type: "grass" },
      "-7|-4": { type: "grass" },
      "-6|-4": { type: "grass" },
      "-5|-4": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-4|-4": { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      "-3|-4": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-2|-4": { type: "grass" },
      "-1|-4": { type: "tree", config: { type: 2 } },
      "0|-4": { type: "path" },
      "1|-4": { type: "grass" },
      "2|-4": { type: "grass" },
      "3|-4": { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      "4|-4": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "5|-4": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "6|-4": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      "7|-4": { type: "grass" },
      "8|-4": { type: "grass" },
      "-8|-5": { type: "cliff", config: { height: 2 } },
      "-7|-5": { type: "cliff", config: { height: 2 } },
      "-6|-5": { type: "cliff", config: { height: 2 } },
      "-5|-5": { type: "cliff", config: [{ position: "right", height: 2 }] },
      "-4|-5": { type: "water", config: { border: "both-side", rotation: Math.PI / 2, wall: ["left"] } },
      "-3|-5": { type: "cliff", config: [{ position: "right", height: 2 }, { position: "bottom", height: 2 }] },
      "-2|-5": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-1|-5": { type: "grass" },
      "0|-5": { type: "path" },
      "1|-5": { type: "grass" },
      "2|-5": { type: "tree", config: { type: 4 } },
      "3|-5": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "4|-5": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "5|-5": { type: "water" },
      "6|-5": { type: "water" },
      "7|-5": { type: "water", config: { border: "corner", wall: ["top"] } },
      "8|-5": { type: "grass" },
      "-8|-6": { type: "cliff", config: { height: 2 } },
      "-7|-6": { type: "cliff", config: { height: 2 } },
      "-6|-6": { type: "cliff", config: { height: 2 } },
      "-5|-6": { type: "cliff", config: [{ position: "right", height: 2 }, { position: "bottom", height: 2 }] },
      "-4|-6": { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } },
      "-3|-6": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-2|-6": { type: "cliff", config: [{ position: "bottom", height: 1 }] },
      "-1|-6": { type: "cliff", config: [{ position: "right", height: 1 }, { position: "bottom", height: 1 }] },
      "0|-6": { type: "path-exit", config: { map: "map2", square: "0|1", arrow: "bottom" } },
      "1|-6": { type: "grass" },
      "2|-6": { type: "cliff" },
      "3|-6": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "4|-6": { type: "grass" },
      "5|-6": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "6|-6": { type: "water", config: { border: "one-side", rotation: Math.PI } },
      "7|-6": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "8|-6": { type: "grass" },
      "-8|-7": { type: "cliff", config: { height: 2 } },
      "-7|-7": { type: "cliff", config: { height: 2 } },
      "-6|-7": { type: "cliff", config: [{ position: "right", height: 2 }] },
      "-5|-7": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "-4|-7": { type: "water" },
      "-3|-7": { type: "water" },
      "-2|-7": { type: "water", config: { border: "both-side", wall: ["top"] } },
      "-1|-7": { type: "water", config: { border: "three-side", wall: ["top"] } },
      "0|-7": { type: "path" },
      "1|-7": { type: "cliff" },
      "2|-7": { type: "cliff" },
      "3|-7": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "4|-7": { type: "tree" },
      "5|-7": { type: "grass" },
      "6|-7": { type: "grass" },
      "7|-7": { type: "grass" },
      "8|-7": { type: "grass" },
      "-8|-8": { type: "cliff", config: { height: 2 } },
      "-7|-8": { type: "cliff", config: { height: 2 } },
      "-6|-8": { type: "cliff", config: { height: 2 } },
      "-5|-8": { type: "cliff", config: { height: 2 } },
      "-4|-8": { type: "cliff", config: { height: 2 } },
      "-3|-8": { type: "cliff", config: [{ position: "right", height: 2 }] },
      "-2|-8": { type: "tree", config: { type: 6 } },
      "-1|-8": { type: "grass" },
      "0|-8": { type: "path" },
      "1|-8": { type: "cliff" },
      "2|-8": { type: "cliff" },
      "3|-8": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "4|-8": { type: "grass" },
      "5|-8": { type: "grass" },
      "6|-8": { type: "grass" },
      "7|-8": { type: "grass" },
      "8|-8": { type: "grass" },
      "-8|-9": { type: "cliff", config: { height: 2 } },
      "-7|-9": { type: "cliff", config: { height: 2 } },
      "-6|-9": { type: "cliff", config: { height: 2 } },
      "-5|-9": { type: "cliff", config: { height: 2 } },
      "-4|-9": { type: "cliff", config: { height: 2 } },
      "-3|-9": { type: "cliff", config: [{ position: "right", height: 2 }] },
      "-2|-9": { type: "cliff", config: { height: 1 } },
      "-1|-9": { type: "cliff", config: [{ position: "right", height: 1 }] },
      "0|-9": { type: "path" },
      "1|-9": { type: "cliff" },
      "2|-9": { type: "cliff" },
      "3|-9": { type: "cliff", config: [{ position: "right", height: 1 }] },
      ...area([4, 8], [-9, -9], { type: "grass" }),
      ...area([-8, -3], [-10, -10], { type: "cliff", config: { height: 2 } }),
      ...area([-2, -1], [-10, -10], { type: "cliff", config: [{ position: "right", height: 2 }, { position: "bottom", height: 2 }] }),
      "0|-10": { type: "path" },
      ...area([1, 10], [-10, -10], { type: "cliff", config: [{ position: "bottom", height: 1 }] }),
      ...area([-8, -1], [-11, -11], { type: "grass" }),
      "0|-11": { type: "path" },
      ...area([1, 8], [-11, -11], { type: "grass" })
    };

    const map2 = {
      ...area([-11, 11], [-11, 11], { type: "water" }),
      ...waterPath(0, [3, 11]),
      "-2|2": { type: "grass" },
      ...area([-4, -2], [3, 3], { type: "water", config: { border: "one-side", rotation: Math.PI } }),
      "1|3": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "-5|2": { type: "water", config: { border: "one-side", rotation: -Math.PI / 2 } },
      ...area([-4, -2], [2, 2], { type: "grass" }),
      "-1|2": { type: "water", config: { border: "three-side", rotation: -Math.PI / 2, wall: ["left"] } },
      "0|2": { type: "path-exit", config: { map: "map1", square: "0|-5", arrow: "top" } },
      "1|2": { type: "grass" },
      "2|2": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "-4|1": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-3|1": { type: "tree", config: { type: 4 } },
      "-2|1": { type: "grass" },
      "-1|1": { type: "grass" },
      "0|1": { type: "path" },
      "1|1": { type: "tree", config: { type: 1 } },
      "2|1": { type: "grass" },
      "3|1": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "-3|0": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-2|0": { type: "grass" },
      "-1|0": { type: "grass" },
      "0|0": { type: "path" },
      "1|0": { type: "grass" },
      "2|0": { type: "tree", config: { type: 2 } },
      "3|0": { type: "grass" },
      ...area([4, 4], [-1, 0], { type: "water", config: { border: "one-side", rotation: Math.PI / 2, wall: ["left"] } }),
      "-2|-1": { type: "water", config: { border: "corner", wall: ["top"] } },
      "-1|-1": { type: "tree", config: { type: 2 } },
      "0|-1": { type: "path" },
      "1|-1": { type: "grass" },
      "2|-1": { type: "grass" },
      "3|-1": { type: "grass" },
      "-2|-2": { type: "water" },
      "-1|-2": { type: "water", config: { border: "corner", wall: ["top"] } },
      "0|-2": { type: "path", config: { type: "full" } },
      "1|-2": { type: "water", config: { border: "three-side", rotation: Math.PI / 2, wall: ["top", "left"] } },
      "2|-2": { type: "grass" },
      "3|-2": { type: "water", config: { border: "corner", wall: ["top", "left"], rotation: Math.PI / 2 } },
      "0|-3": { type: "path", config: { type: "full" } },
      "2|-3": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "1|-3": { type: "water", config: { border: "corner", rotation: Math.PI, wall: ["left"] } },
      "-1|-3": { type: "water", config: { border: "corner", rotation: -Math.PI / 2 } },
      "-2|-3": { type: "water" },
      ...platform(-2, -6),
      "0|-7": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "2|-7": { type: "water" },
      "1|-7": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-1|-7": { type: "water", config: { border: "one-side", wall: ["top"] } },
      "-2|-7": { type: "water" }
    };

    var maps = {
      map1,
      map2
    };

    var __defProp$5 = Object.defineProperty;
    var __name$5 = (target, value) => __defProp$5(target, "name", { value, configurable: true });
    const renderExitPath = /* @__PURE__ */ __name$5(({
      coordinates,
      app,
      config,
      key,
      scene
    }) => {
      renderPath({
        app,
        coordinates,
        scene,
        config: {
          ...config,
          type: "narow"
        }
      });
      const maybeLoadMap = /* @__PURE__ */ __name$5(({
        character
      }) => {
        if (character.name !== "main")
          return;
        const square = app.map.getSquareByCoordinates(character.object.position);
        if (square.key !== key)
          return;
        const mapName = config.map ?? "map1";
        const initialSquare = config.square ?? "0|0";
        app.map.load(
          mapName,
          maps[mapName],
          initialSquare
        );
        app.hooks.removeAction("characterMoved", maybeLoadMap);
      }, "maybeLoadMap");
      app.hooks.addAction("characterMoved", maybeLoadMap);
    }, "renderExitPath");

    var __defProp$4 = Object.defineProperty;
    var __name$4 = (target, value) => __defProp$4(target, "name", { value, configurable: true });
    const registerSquares = /* @__PURE__ */ __name$4((app) => {
      app.map.registerSquareType("cliff", {
        render: renderCliff,
        walkable: false
      });
      app.map.registerSquareType("grass", {
        render: renderGrass,
        walkable: true
      });
      app.map.registerSquareType("water", {
        render: renderWater,
        walkable: false
      });
      app.map.registerSquareType("tree", {
        render: renderTree,
        walkable: true
      });
      app.map.registerSquareType("path", {
        render: renderPath,
        walkable: true
      });
      app.map.registerSquareType("path-exit", {
        render: renderExitPath,
        walkable: true
      });
    }, "registerSquares");

    var GlowFragment = "uniform vec3 glowColor;\nvarying float intensity;\n\n// @see https://stemkoski.github.io/Three.js/Shader-Glow.html\nvoid main() {\n\t\n  vec3 glow = glowColor * intensity;\n  \n  gl_FragColor = vec4( glow, 1.0 );\n}\n";

    var GlowVertex = "uniform vec3 viewVector;\nuniform float c;\nuniform float p;\nvarying float intensity;\n\n// @see https://stemkoski.github.io/Three.js/Shader-Glow.html\nvoid main() {\n  \n  vec3 vNormal = normalize( normalMatrix * normal );\n\tvec3 vNormel = normalize( normalMatrix * viewVector );\n\t\n  intensity = pow( c - dot(vNormal, vNormel), p );\n\t\n  gl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}\n";

    var story1 = [
      // River -> Central path -> Side of the bridge
      (character) => character.actions.moveToSquare.start("0|-2", {}, "walk"),
      (character) => character.actions.moveToSquare.start("0|-2", { x: -50 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch"),
      // Side of the bridge -> Top of path -> River
      (character) => character.actions.moveToSquare.start("-2|0", { x: -50 }, "walk"),
      (character) => character.actions.moveToSquare.start("-2|0", { x: -50, y: -50 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch"),
      // River -> Top of the path -> Side of the bridge
      (character) => character.actions.moveToSquare.start("0|-2", {}, "walk"),
      (character) => character.actions.moveToSquare.start("0|-2", { x: 50 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch"),
      // Side of the bridge -> Bottom of the path -> River
      (character) => character.actions.moveToSquare.start("2|-4", {}, "walk"),
      (character) => character.actions.moveToSquare.start("2|-4", { y: 50 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch")
      // Start again!
    ];

    var story2 = [
      // Go next to the sea
      (character) => character.actions.moveToSquare.start("1|-5", {}, "walk"),
      (character) => character.actions.moveToSquare.start("1|-5", { x: 75 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch"),
      // Go on the other side
      (character) => character.actions.moveToSquare.start("1|-5", {}, "walk"),
      (character) => character.actions.moveToSquare.start("0|-6", {}, "walk"),
      (character) => character.actions.moveToSquare.start("-1|-5", {}, "walk"),
      (character) => character.actions.moveToSquare.start("-1|-5", { x: -75 }, "walk"),
      // Wait for 5 second
      (character) => character.actions.wait.start(5e3, "stretch"),
      // Go back to the initial position
      (character) => character.actions.moveToSquare.start("-1|-5", {}, "walk"),
      (character) => character.actions.moveToSquare.start("-1|-4", {}, "walk")
      // Start again!
    ];

    var stories = [
      story1,
      story2
    ];

    var __defProp$3 = Object.defineProperty;
    var __name$3 = (target, value) => __defProp$3(target, "name", { value, configurable: true });
    const createCharacter = /* @__PURE__ */ __name$3((app, name, color, callback = false, attributes = {}) => {
      const folder = "./assets/ressources/characters/";
      const changeTexture = /* @__PURE__ */ __name$3((url) => url.includes("Peasant Nolant") && url.includes(".png") ? folder + "peasant/" + color + ".png" : url, "changeTexture");
      app.hooks.addFilter("loadRessourceURL", changeTexture);
      app.characters.add({
        name,
        file: folder + "peasant/peasant.fbx",
        card: folder + "main/main.png",
        animations: {
          run: folder + "peasant/animations/run.fbx",
          idle: folder + "peasant/animations/idle.fbx",
          angry: folder + "peasant/animations/angry.fbx",
          walk: folder + "peasant/animations/walk.fbx",
          stretch: folder + "peasant/animations/stretch.fbx",
          sit: folder + "peasant/animations/sit.fbx",
          look: folder + "peasant/animations/look.fbx"
        },
        attributes: {
          speed: {
            run: 0.5,
            walk: 0.13
          },
          ...attributes
        }
      }, (character) => {
        if (character.name !== "main") {
          character.object.children[1].removeFromParent();
        }
        character.object.scale.set(0.5, 0.5, 0.5);
        character.object.rotation.x = Math.PI / 2;
        app.hooks.removeFilter("loadRessourceURL", changeTexture);
        callback(character);
      });
    }, "createCharacter");

    var __defProp$2 = Object.defineProperty;
    var __name$2 = (target, value) => __defProp$2(target, "name", { value, configurable: true });
    const init$2 = /* @__PURE__ */ __name$2((app) => {
      createCharacter(app, "main", "yellow", (character) => {
        app.characters.setMain(character.name);
        app.map.load("map1", maps["map1"], "0|0");
      });
      app.hooks.addAction("mapLoaded", (args) => {
        if (args.name !== "map1")
          return;
        createCharacter(app, "peasant1", "brown", (character) => {
          app.map.current.scene.add(character.object);
          app.map.moveCharacterOnSquare("2|-4", character);
          const doAction = /* @__PURE__ */ __name$2((index) => {
            if (app.map.current.name !== "map1")
              return;
            stories[0][index](character).then(() => doAction(
              stories[0].length - 1 !== index ? index + 1 : 0
            ));
          }, "doAction");
          doAction(0);
        });
      });
      app.hooks.addAction("mapLoaded", (args) => {
        if (args.name !== "map2")
          return;
        createCharacter(app, "peasant2", "green", (character) => {
          app.map.current.scene.add(character.object);
          app.map.moveCharacterOnSquare("0|-1", character);
          const doAction = /* @__PURE__ */ __name$2((index) => {
            if (app.map.current.name !== "map2")
              return;
            stories[1][index](character).then(() => doAction(
              stories[1].length - 1 !== index ? index + 1 : 0
            ));
          }, "doAction");
          doAction(0);
        });
        createCharacter(app, "peasant3", "blue", (character) => {
          app.map.current.scene.add(character.object);
          const coordinates = app.map.getCoordinateBySquare("2|-2");
          character.startAnimation("sit");
          character.object.position.set(
            coordinates.x - 75,
            coordinates.y - 100,
            -10
          );
        });
      });
      app.hooks.addAction("mapLoaded", (args) => {
        const mesh = app.world.cache.get("glow-material", () => {
          const sphere = new window.discore.THREE.SphereGeometry(app.map.squareSize / 4, 15, 15);
          const material = new window.discore.THREE.ShaderMaterial({
            vertexShader: GlowVertex,
            fragmentShader: GlowFragment,
            side: window.discore.THREE.FrontSide,
            blending: window.discore.THREE.AdditiveBlending,
            transparent: true,
            uniforms: {
              c: { type: "f", value: 1 },
              p: { type: "f", value: 4.2 },
              glowColor: { type: "c", value: new window.discore.THREE.Color(16776960) },
              viewVector: { type: "v3", value: app.camera.position }
            }
          });
          const mesh2 = new window.discore.THREE.Mesh(sphere, material);
          mesh2.renderOrder = 2;
          return mesh2;
        });
        app.hooks.addAction("mouseEnterCharacter", ({ character }) => {
          if (character.name === "main")
            app.map.current.scene.remove(mesh);
        });
        app.hooks.addAction("mouseOnCharacter", ({ character }) => {
          if (character.name === "main")
            return app.map.current.scene.remove(mesh);
          mesh.position.set(
            character.object.position.x,
            character.object.position.y,
            character.object.position.z + app.map.squareSize / 4
          );
          app.map.current.scene.add(mesh);
        });
        app.hooks.addAction("mouseLeaveCharacter", () => {
          app.map.current.scene.remove(mesh);
        });
      });
    }, "init");

    var conversation1 = [
      {
        character: "helpful-peasant",
        content: [
          "Do you think this blue thing is supposed to be a river?",
          "I'm sorry, that's a rhetorical question. You can't really participate to any conversations in this world, for now at least. I've heard it might change in the future.",
          "I can give you a few tips if you want."
        ]
      },
      {
        character: "helpful-peasant",
        content: [
          "First, you can change the position of the camera by pressing C. It will switch to a top-down view.",
          "Some hitboxes are a bit wide, especially near the trees. Changing the view can help you visualize this."
        ]
      },
      {
        character: "helpful-peasant",
        content: [
          "You can leave this map and head toward a small island by following the path down. There are other people there but they don't have a lot to say.",
          "If you choose to go there, you can still come back afterward."
        ]
      },
      {
        character: "helpful-peasant",
        content: [
          "Lastly, if you are interested in the code running this, it is available on GitHub in this following repository:",
          {
            type: "link",
            content: "discount-elysium repository",
            url: "https://github.com/nicolas-jaussaud/discount-elysium"
          },
          "You can also take a look at the Discore repository and its documentation, it's the library used in discount-elysium.",
          {
            type: "link",
            content: "discore repository",
            url: "https://github.com/nicolas-jaussaud/discore"
          },
          {
            type: "link",
            content: "discore documentation",
            url: "https://nicolas-jaussaud.github.io/discore/"
          },
          "If you visit the Discore documentation, please be aware that I don't know how to write and that it will be full of typos."
        ]
      }
    ];

    var conversation2 = [
      {
        character: "peasant",
        content: [
          "Are we on a floating platform? Is this a peninsula? I can't discern whether it's a lake, a sea, or perhaps a river.",
          "I wish I could spend my day relaxing, but this place doesn't make any sense."
        ]
      }
    ];

    var conversation3 = [
      {
        character: "chill-peasant",
        content: [
          "Take a moment to relax, my friend. Enjoy the journey."
        ]
      }
    ];

    var __defProp$1 = Object.defineProperty;
    var __name$1 = (target, value) => __defProp$1(target, "name", { value, configurable: true });
    const init$1 = /* @__PURE__ */ __name$1((app2, discussions) => {
      discussions.characters.add("helpful-peasant", {
        name: "Helpful peasant",
        color: "#467964",
        image: "./assets/ressources/characters/peasant/images/brown.png"
      });
      discussions.characters.add("chill-peasant", {
        name: "Chill peasant",
        color: "#346786",
        image: "./assets/ressources/characters/peasant/images/blue.png"
      });
      discussions.characters.add("peasant", {
        name: "Confused peasant",
        color: "#719b8f",
        image: "./assets/ressources/characters/peasant/images/green.png"
      });
      app2.hooks.addAction("clickOnCharacter", ({ character }) => followAndTalk(character, discussions));
    }, "init");
    const openConversation = /* @__PURE__ */ __name$1((discussions, app2, character) => {
      switch (character) {
        case "peasant1":
          app2.stop();
          discussions.open(conversation1, app2.start);
          break;
        case "peasant2":
          app2.stop();
          discussions.open(conversation2, app2.start);
          break;
        case "peasant3":
          app2.stop();
          discussions.open(conversation3, app2.start);
          break;
      }
    }, "openConversation");
    const followAndTalk = /* @__PURE__ */ __name$1((character, discussions, prevSquare = false) => {
      const main = app.characters.getMain();
      main.actions.move.start(
        character.object.position.x,
        character.object.position.y,
        0
      ).then(() => {
        const characterSquare = app.map.getSquareByCoordinates({
          x: character.object.position.x,
          y: character.object.position.y
        });
        const currentSquare = app.map.getSquareByCoordinates({
          x: main.object.position.x,
          y: main.object.position.y
        });
        if (currentSquare.key !== characterSquare.key) {
          if (currentSquare !== prevSquare)
            followAndTalk(character, discussions, currentSquare);
          return;
        }
        openConversation(discussions, app, character.name);
      });
    }, "followAndTalk");

    var __defProp = Object.defineProperty;
    var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
    const init = /* @__PURE__ */ __name(() => {
      const app = discore.init({
        element: document.getElementById("app"),
        environment: window.environment ?? process.env.NODE_ENV
      });
      const discussions = discursed.init({
        element: document.getElementById("discussions")
      });
      registerSquares(app);
      init$2(app);
      init$1(app, discussions);
      const hemiLight = new window.discore.THREE.HemisphereLight(16777215, 16777215, 0.7);
      const sideLight = new window.discore.THREE.DirectionalLight("rgb(255, 255, 255)", 0.1);
      sideLight.position.set(500, 500, 1e3);
      sideLight.castShadow = true;
      sideLight.shadow.camera.left = 2e3;
      sideLight.shadow.camera.right = -2e3;
      sideLight.shadow.camera.top = 2e3;
      sideLight.shadow.camera.bottom = -2e3;
      sideLight.shadow.camera.near = 0.1;
      sideLight.shadow.camera.far = 1e4;
      if (app.environment === "development") {
        app.hooks.addAction("loadComplete", () => {
          app.map.current.scene.add(
            new window.discore.THREE.CameraHelper(sideLight.shadow.camera)
          );
        });
      }
      app.lights.push(hemiLight);
      app.lights.push(sideLight);
      app.hooks.addAction("mapLoaded", () => app.renderer.shadowMap.autoUpdate = true);
      app.hooks.addAction("loadComplete", () => app.renderer.shadowMap.autoUpdate = false);
      window.addEventListener("resize", () => app.updateSize(window.innerWidth, window.innerHeight));
      window.app = app;
    }, "init");
    window.addEventListener("load", init);

})();
//# sourceMappingURL=app.min.js.map
